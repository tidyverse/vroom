[{"path":[]},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://vroom.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://vroom.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 vroom authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"current-state","dir":"","previous_headings":"","what":"Current state","title":"NA","text":"talk UseR 2019 gives good overview goals high level design package (https://www.youtube.com/watch?v=RA9AjqZXxMU&t=10s) code vroom grown gnarly time edge cases handled. Particularly nasty bits col_spec_standardise() code around ingex_region(), can fiddly one errors. probably stand re-factored possibly simplified, attempted test cases contain known edge cases. test coverage fortunately decent. Particular points tend crop different code paths following things - reading normal files connections - line endings (‘’, ‘, ’’) - files ending trailing newline . - Use ALTREP test helper test_vroom() automatically tests content normal files connections ALTREP , tests line endings trailing newlines. Files without trailing newline automatically detected always sent code reads connection. code path multi-threaded normal files, connections read asynchronously written temporary file, read normal.","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"debugging","dir":"","previous_headings":"Current state","what":"Debugging","title":"NA","text":"compile logging enabled need set -DVROOM_LOG ~/R/Makevars want control logging level can set -DSPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_DEBUG. also need create logs directory logs written . write logs/index.idx logs/index_connection.idx file respectively. file appended , rewritten, need delete want new file run. also -DVROOM_USE_CONNECTIONS_API use CRAN forbidden connections API directly, performance difference generally , isn’t really needed.","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"known-outstanding-issues","dir":"","previous_headings":"","what":"Known outstanding issues","title":"NA","text":"Currently line numbers problems() don’t take account skipped commented lines, don’t keep track many seen. entirely trivial , need keep track locations skipped commented lines chunk, fix assembling problems data frame. clear trade worth effort. hand reporting incorrect line numbers also good. https://github.com/r-lib/vroom/issues/295 tracks issue","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"future-directions","dir":"","previous_headings":"","what":"Future directions","title":"NA","text":"general clear much time effort continue go future. consider using arrow primary way read CSV files rather relying maintaining codebase? lazy reading interesting approach theory, clear many people helps practice. also effective R primarily comparatively slow R constructing strings, due reliance global string pool.","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"memory-mapped-index","dir":"","previous_headings":"Future directions","what":"Memory mapped index","title":"NA","text":"vroom-mmap-index experimental code storing index mmap file instead memory. seemed work well limited testing, actually bit faster initial testing current approach, allow handle bigger files. also allow potentially save index re-use . potential challenges store index default, API store , exact incantation needed grow index dynamically needed, won’t know size need done parsing. https://github.com/r-lib/vroom/issues/51#issue-414823372 tracks issue.","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"using-simd-code-for-the-indexing","dir":"","previous_headings":"Future directions","what":"Using SIMD code for the indexing","title":"NA","text":"simdcsv experiment writing CSV parser uses SIMD approaches similar simdjson speculative parsing ideas another paper figure quoted block multiple threads. Benchmarks indicate approach can ~2x fast current parser . still parse data afterwards, possible approaches make faster current implementations well.","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"alternative-handling-of-files-without-trailing-newlines","dir":"","previous_headings":"Future directions","what":"Alternative handling of files without trailing newlines","title":"NA","text":"Stack overflow thread suggests mmap file beyond size mmap guaranteed pad remainder 0’s. true always way handle case file doesn’t end newline, simplify implementation files, allow us use multi-threads read . However investigate behavior actually true across platforms . strcspn requires data must end NUL, guarantee approach won’t work. https://github.com/r-lib/vroom/issues/357 tracks issue","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"ideas-we-are-not-pursuing","dir":"","previous_headings":"","what":"Ideas we are not pursuing","title":"NA","text":"following projects merit, require maintainer bandwidth currently available. helpful us () record explicitly possible future (b) get open issues. https://github.com/tidyverse/vroom/issues/186 https://github.com/tidyverse/vroom/issues/151 https://github.com/tidyverse/vroom/issues/250 https://github.com/tidyverse/readr/issues/1316","code":""},{"path":"https://vroom.r-lib.org/dev/MAINTENANCE.html","id":"external-standards","dir":"","previous_headings":"","what":"External “standards”","title":"NA","text":"https://datatracker.ietf.org/doc/html/rfc4180","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"how-it-works","dir":"Articles","previous_headings":"","what":"How it works","title":"Vroom Benchmarks","text":"initial reading file simply records locations individual record, actual values read R. Altrep vectors created column data hold pointer index memory mapped file. vectors indexed value read memory mapping. means initial reading extremely fast, real world dataset ~ 1/4 time multi-threaded data.table::fread(). Sampling operations likewise extremely fast, data actually included sample read. means things like tibble print method, calling head(), tail() x[sample(), ] etc. low overhead. Filtering also can fast, columns included filter selection fully read data filtered rows needs read remaining columns. Grouped aggregations likewise need read grouping variables variables aggregated. particular vector fully materialized speed subsequent operations identical normal R vector. approach potentially also allows work data larger memory. long careful avoid materializing entire dataset can efficiently queried subset.","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"reading-delimited-files","dir":"Articles","previous_headings":"","what":"Reading delimited files","title":"Vroom Benchmarks","text":"following benchmarks measure reading delimited files various sizes data types. vroom delays reading benchmarks also manipulation data afterwards try provide realistic performance comparison. read.delim results much slower others excluded plots, retained tables.","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"taxi-trip-dataset","dir":"Articles","previous_headings":"Reading delimited files","what":"Taxi Trip Dataset","title":"Vroom Benchmarks","text":"real world dataset Freedom Information Law (FOIL) Taxi Trip Data NYC Taxi Limousine Commission 2013, originally posted https://chriswhong.com/open-data/foil_nyc_taxi/. also hosted archive.org. first table trip_fare_1.csv 1.55G size.","code":"#> Observations: 14,776,615 #> Variables: 11 #> $ medallion       <chr> \"89D227B655E5C82AECF13C3F540D4CF4\", \"0BD7C8F5B... #> $ hack_license    <chr> \"BA96DE419E711691B9445D6A6307C170\", \"9FD8F69F0... #> $ vendor_id       <chr> \"CMT\", \"CMT\", \"CMT\", \"CMT\", \"CMT\", \"CMT\", \"CMT... #> $ pickup_datetime <chr> \"2013-01-01 15:11:48\", \"2013-01-06 00:18:35\", ... #> $ payment_type    <chr> \"CSH\", \"CSH\", \"CSH\", \"CSH\", \"CSH\", \"CSH\", \"CSH... #> $ fare_amount     <dbl> 6.5, 6.0, 5.5, 5.0, 9.5, 9.5, 6.0, 34.0, 5.5, ... #> $ surcharge       <dbl> 0.0, 0.5, 1.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0... #> $ mta_tax         <dbl> 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0... #> $ tip_amount      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... #> $ tolls_amount    <dbl> 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.8, 0.0, 0... #> $ total_amount    <dbl> 7.0, 7.0, 7.0, 6.0, 10.5, 10.0, 6.5, 39.3, 7.0..."},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"taxi-benchmarks","dir":"Articles","previous_headings":"Reading delimited files > Taxi Trip Dataset","what":"Taxi Benchmarks","title":"Vroom Benchmarks","text":"code: bench/taxi benchmarks run Amazon EC2 m5.4xlarge instance 16 vCPUs EBS volume type. benchmarks labeled vroom_base uses vroom base functions manipulation. vroom_dplyr uses vroom read file dplyr functions manipulate. data.table uses fread() read file data.table functions manipulate readr uses readr read file dplyr manipulate. default vroom uses Altrep character vectors, labeled vroom(altrep: normal). benchmarks labeled vroom(altrep: full) instead use Altrep vectors supported types vroom(altrep: none) disable Altrep entirely. following operations performed. data read print() - N.B. read.delim uses print(head(x, 10)) printing whole dataset takes > 10 minutes head() tail() Sampling 100 random rows Filtering “UNK” payment, 6434 rows (0.0435% total). Aggregation mean fare amount per payment type. (N.B. Rcpp used dplyr implementation fully materializes Altrep numeric vectors using filter() sample_n(), first cases additional overhead using full Altrep.).","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"all-numeric-data","dir":"Articles","previous_headings":"Reading delimited files","what":"All numeric data","title":"Vroom Benchmarks","text":"numeric data really worst case scenario vroom. index takes much memory parsed data. Also parsing doubles can done quickly parallel text representations doubles ~25 characters isn’t great deal savings delayed parsing. reasons (data.table implementation fast) vroom bit slower fread pure numeric data. However vroom multi-threaded bit quicker readr read.delim type data.","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"long","dir":"Articles","previous_headings":"Reading delimited files > All numeric data","what":"Long","title":"Vroom Benchmarks","text":"code: bench/all_numeric-long","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"wide","dir":"Articles","previous_headings":"Reading delimited files > All numeric data","what":"Wide","title":"Vroom Benchmarks","text":"code: bench/all_numeric-wide","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"all-character-data","dir":"Articles","previous_headings":"Reading delimited files","what":"All character data","title":"Vroom Benchmarks","text":"code: bench/all_character-long character data best case scenario vroom using Altrep, takes full advantage lazy reading.","code":""},{"path":[]},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"wide-1","dir":"Articles","previous_headings":"Reading delimited files > All character data","what":"Wide","title":"Vroom Benchmarks","text":"code: bench/all_character-wide","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"reading-multiple-delimited-files","dir":"Articles","previous_headings":"","what":"Reading multiple delimited files","title":"Vroom Benchmarks","text":"code: bench/taxi_multiple benchmark reads 12 files taxi trip fare data, totaling 173,179,759 rows 11 columns total file size 18.4G.","code":""},{"path":[]},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"united-states-census-5-percent-public-use-microdata-sample-files","dir":"Articles","previous_headings":"Reading fixed width files","what":"United States Census 5-Percent Public Use Microdata Sample files","title":"Vroom Benchmarks","text":"fixed width dataset contains individual records characteristics 5 percent sample people housing units year 2000 freely available https://web.archive.org/web/20150908055439/https://www2.census.gov/census_2000/datasets/PUMS/FivePercent/California/all_California.zip. data split files state, state California used benchmark. data totals 2,342,339 rows 37 columns total file size 677M.","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"census-data-benchmarks","dir":"Articles","previous_headings":"Reading fixed width files","what":"Census data benchmarks","title":"Vroom Benchmarks","text":"code: bench/fwf","code":""},{"path":"https://vroom.r-lib.org/dev/articles/benchmarks.html","id":"writing-delimited-files","dir":"Articles","previous_headings":"","what":"Writing delimited files","title":"Vroom Benchmarks","text":"code: bench/taxi_writing benchmarks write taxi trip dataset different ways. uncompressed file gzip compressed file using gzfile() (readr vroom automatically files ending .gz) gzip compressed file compressed multiple threads (natively data.table using pipe() connection pigz rest). Zstandard compressed file (data.table support format).","code":""},{"path":[]},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"reading-files","dir":"Articles","previous_headings":"","what":"Reading files","title":"Get started with vroom","text":"read CSV, type delimited file vroom pass file vroom(). delimiter automatically guessed common delimiter; e.g. (“,” “” ” “|” “:” “;”). guessing fails using less common delimiter specify delim parameter. (e.g. delim = \",\"). included example CSV file vroom package use examples tests. Access vroom_example(\"mtcars.csv\")","code":"# See where the example file is stored on your machine file <- vroom_example(\"mtcars.csv\") file #> [1] \"/home/runner/work/_temp/Library/vroom/extdata/mtcars.csv\"  # Read the file, by default vroom will guess the delimiter automatically. vroom(file) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4 #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1     4 #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl>  # You can also specify it explicitly, which is (slightly) faster, and safer if # you know how the file is delimited. vroom(file, delim = \",\") #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4 #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1     4 #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"reading-multiple-files","dir":"Articles","previous_headings":"","what":"Reading multiple files","title":"Get started with vroom","text":"reading set files columns (, names types), can pass filenames directly vroom() combine one result. vroom’s example datasets include several files named like mtcars-.csv. files contain subsets mtcars data, cars different numbers cylinders. First, get character vector filepaths. Now can efficiently read one table passing filenames directly vroom. Often filename directory files stored contains information. id parameter can used add extra column result full path file. (case name column path).","code":"ve <- grep(\"mtcars-[0-9].csv\", vroom_examples(), value = TRUE) files <- sapply(ve, vroom_example) files #>                                                 mtcars-4.csv  #> \"/home/runner/work/_temp/Library/vroom/extdata/mtcars-4.csv\"  #>                                                 mtcars-6.csv  #> \"/home/runner/work/_temp/Library/vroom/extdata/mtcars-6.csv\"  #>                                                 mtcars-8.csv  #> \"/home/runner/work/_temp/Library/vroom/extdata/mtcars-8.csv\" vroom(files) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Datsun 7…  22.8     4  108     93  3.85  2.32  18.6     1     1     4 #> 2 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     0     4 #> 3 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     0     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl> vroom(files, id = \"path\") #> Rows: 32 Columns: 13 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 13 #>   path      model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am #>   <chr>     <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 /home/ru… Dats…  22.8     4  108     93  3.85  2.32  18.6     1     1 #> 2 /home/ru… Merc…  24.4     4  147.    62  3.69  3.19  20       1     0 #> 3 /home/ru… Merc…  22.8     4  141.    95  3.92  3.15  22.9     1     0 #> # ℹ 29 more rows #> # ℹ 2 more variables: gear <dbl>, carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"reading-compressed-files","dir":"Articles","previous_headings":"","what":"Reading compressed files","title":"Get started with vroom","text":"vroom supports reading zip, gz, bz2 xz compressed files automatically, just pass filename compressed file vroom. vroom() decompresses, indexes writes decompressed data file temp directory single stream. temporary file used lazily look values automatically cleaned values object fully read, object removed, R session ends.","code":"file <- vroom_example(\"mtcars.csv.gz\")  vroom(file) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4 #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1     4 #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"reading-individual-files-from-a-multi-file-zip-archive","dir":"Articles","previous_headings":"Reading compressed files","what":"Reading individual files from a multi-file zip archive","title":"Get started with vroom","text":"reading zip file contains multiple files format, can read subset files like :","code":"zip_file <- vroom_example(\"mtcars-multi-cyl.zip\") filenames <- unzip(zip_file, list = TRUE)$Name filenames #> [1] \"mtcars-4.csv\" \"mtcars-6.csv\" \"mtcars-8.csv\"  # imagine we only want to read 2 of the 3 files vroom(purrr::map(filenames[c(1, 3)], ~ unz(zip_file, .x))) #> Rows: 25 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 25 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Datsun 7…  22.8     4  108     93  3.85  2.32  18.6     1     1     4 #> 2 Merc 240D  24.4     4  147.    62  3.69  3.19  20       1     0     4 #> 3 Merc 230   22.8     4  141.    95  3.92  3.15  22.9     1     0     4 #> # ℹ 22 more rows #> # ℹ 1 more variable: carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"reading-remote-files","dir":"Articles","previous_headings":"","what":"Reading remote files","title":"Get started with vroom","text":"vroom can read files directly internet well passing URL file vroom. can even read gzipped files internet (although compressed formats).","code":"file <- \"https://raw.githubusercontent.com/tidyverse/vroom/main/inst/extdata/mtcars.csv\" vroom(file) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4 #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1     4 #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl> file <- \"https://raw.githubusercontent.com/tidyverse/vroom/main/inst/extdata/mtcars.csv.gz\" vroom(file) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4 #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1     4 #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"column-selection","dir":"Articles","previous_headings":"","what":"Column selection","title":"Get started with vroom","text":"vroom provides interface column selection renaming dplyr::select(). provides efficient, flexible readable selections. example can select : character vector column names numeric vector column indexes, e.g. c(1, 2, 5) Using selection helpers starts_with() ends_with() can also rename columns","code":"file <- vroom_example(\"mtcars.csv.gz\")  vroom(file, col_select = c(model, cyl, gear)) #> Rows: 32 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): model #> dbl (2): cyl, gear #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 3 #>   model           cyl  gear #>   <chr>         <dbl> <dbl> #> 1 Mazda RX4         6     4 #> 2 Mazda RX4 Wag     6     4 #> 3 Datsun 710        4     4 #> # ℹ 29 more rows vroom(file, col_select = c(1, 3, 11)) #> Rows: 32 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): model #> dbl (2): cyl, gear #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 3 #>   model           cyl  gear #>   <chr>         <dbl> <dbl> #> 1 Mazda RX4         6     4 #> 2 Mazda RX4 Wag     6     4 #> 3 Datsun 710        4     4 #> # ℹ 29 more rows vroom(file, col_select = starts_with(\"d\")) #> Rows: 32 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): disp, drat #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 2 #>    disp  drat #>   <dbl> <dbl> #> 1   160  3.9  #> 2   160  3.9  #> 3   108  3.85 #> # ℹ 29 more rows vroom(file, col_select = c(car = model, everything())) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>   car         mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4 #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1     4 #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"reading-fixed-width-files","dir":"Articles","previous_headings":"","what":"Reading fixed width files","title":"Get started with vroom","text":"fixed width file can compact representation numeric data. Unfortunately, ’s also often painful read need describe length every field. vroom aims make easy possible providing number different ways describe field structure. Use vroom_fwf() conjunction one following helper functions read file. fwf_empty() - Guess based position empty columns. fwf_widths() - Use user provided set field widths. fwf_positions() - Use user provided sets start end positions. fwf_cols() - Use user provided named widths. fwf_cols() - Use user provided named pairs positions.","code":"fwf_sample <- vroom_example(\"fwf-sample.txt\") cat(readLines(fwf_sample)) #> John Smith          WA        418-Y11-4111 Mary Hartford       CA        319-Z19-4341 Evan Nolan          IL        219-532-c301 vroom_fwf(fwf_sample, fwf_empty(fwf_sample, col_names = c(\"first\", \"last\", \"state\", \"ssn\"))) #> Rows: 3 Columns: 4 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (4): first, last, state, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 4 #>   first last     state ssn          #>   <chr> <chr>    <chr> <chr>        #> 1 John  Smith    WA    418-Y11-4111 #> 2 Mary  Hartford CA    319-Z19-4341 #> 3 Evan  Nolan    IL    219-532-c301 vroom_fwf(fwf_sample, fwf_widths(c(20, 10, 12), c(\"name\", \"state\", \"ssn\"))) #> Rows: 3 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (3): name, state, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 3 #>   name          state ssn          #>   <chr>         <chr> <chr>        #> 1 John Smith    WA    418-Y11-4111 #> 2 Mary Hartford CA    319-Z19-4341 #> 3 Evan Nolan    IL    219-532-c301 vroom_fwf(fwf_sample, fwf_positions(c(1, 30), c(20, 42), c(\"name\", \"ssn\"))) #> Rows: 3 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (2): name, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 2 #>   name          ssn          #>   <chr>         <chr>        #> 1 John Smith    418-Y11-4111 #> 2 Mary Hartford 319-Z19-4341 #> 3 Evan Nolan    219-532-c301 vroom_fwf(fwf_sample, fwf_cols(name = 20, state = 10, ssn = 12)) #> Rows: 3 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (3): name, state, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 3 #>   name          state ssn          #>   <chr>         <chr> <chr>        #> 1 John Smith    WA    418-Y11-4111 #> 2 Mary Hartford CA    319-Z19-4341 #> 3 Evan Nolan    IL    219-532-c301 vroom_fwf(fwf_sample, fwf_cols(name = c(1, 20), ssn = c(30, 42))) #> Rows: 3 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (2): name, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 2 #>   name          ssn          #>   <chr>         <chr>        #> 1 John Smith    418-Y11-4111 #> 2 Mary Hartford 319-Z19-4341 #> 3 Evan Nolan    219-532-c301"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"column-types","dir":"Articles","previous_headings":"","what":"Column types","title":"Get started with vroom","text":"vroom guesses data types columns read, however sometimes guessing fails necessary explicitly set type one columns. available specifications : (single letter abbreviations quotes) col_logical() ‘l’, containing T, F, TRUE, FALSE, 1 0. col_integer() ‘’, integer values. col_big_integer() ‘’, Big integer values. (64bit integers) col_double() ‘d’, floating point values. col_number() ‘n’, numbers containing grouping_mark col_date(format = \"\") ‘D’: locale’s date_format. col_time(format = \"\") ‘t’: locale’s time_format. col_datetime(format = \"\") ‘T’: ISO8601 date times. col_factor(levels, ordered) ‘f’, fixed set values. col_character() ‘c’, everything else. col_skip() ’_, -’, don’t import column. col_guess() ‘?’, parse using “best” type based input. can tell vroom columns use col_types() argument number ways. need override single column concise way use named vector. can read columns type, using .default argument. example reading everything character. However can also use col_*() functions list. useful column type needs additional information, categorical data know levels factor.","code":"# read the 'hp' columns as an integer vroom(vroom_example(\"mtcars.csv\"), col_types = c(hp = \"i\")) #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>   <chr>     <dbl> <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1     4 #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1     4 #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1     4 #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl>  # also skip reading the 'cyl' column vroom(vroom_example(\"mtcars.csv\"), col_types = c(hp = \"i\", cyl = \"_\")) #> # A tibble: 32 × 11 #>   model       mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <chr>     <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 Mazda RX4  21     160   110  3.9   2.62  16.5     0     1     4     4 #> 2 Mazda RX…  21     160   110  3.9   2.88  17.0     0     1     4     4 #> 3 Datsun 7…  22.8   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows  # also read the gears as a factor vroom(vroom_example(\"mtcars.csv\"), col_types = c(hp = \"i\", cyl = \"_\", gear = \"f\")) #> # A tibble: 32 × 11 #>   model       mpg  disp    hp  drat    wt  qsec    vs    am gear   carb #>   <chr>     <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl> <dbl> <fct> <dbl> #> 1 Mazda RX4  21     160   110  3.9   2.62  16.5     0     1 4         4 #> 2 Mazda RX…  21     160   110  3.9   2.88  17.0     0     1 4         4 #> 3 Datsun 7…  22.8   108    93  3.85  2.32  18.6     1     1 4         1 #> # ℹ 29 more rows vroom(vroom_example(\"mtcars.csv\"), col_types = c(.default = \"c\")) #> # A tibble: 32 × 12 #>   model     mpg   cyl   disp  hp    drat  wt    qsec  vs    am    gear  #>   <chr>     <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #> 1 Mazda RX4 21    6     160   110   3.9   2.62  16.46 0     1     4     #> 2 Mazda RX… 21    6     160   110   3.9   2.875 17.02 0     1     4     #> 3 Datsun 7… 22.8  4     108   93    3.85  2.32  18.61 1     1     4     #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <chr> vroom(   vroom_example(\"mtcars.csv\"),   col_types = list(hp = col_integer(), cyl = col_skip(), gear = col_factor()) ) #> # A tibble: 32 × 11 #>   model       mpg  disp    hp  drat    wt  qsec    vs    am gear   carb #>   <chr>     <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl> <dbl> <fct> <dbl> #> 1 Mazda RX4  21     160   110  3.9   2.62  16.5     0     1 4         4 #> 2 Mazda RX…  21     160   110  3.9   2.88  17.0     0     1 4         4 #> 3 Datsun 7…  22.8   108    93  3.85  2.32  18.6     1     1 4         1 #> # ℹ 29 more rows vroom(   vroom_example(\"mtcars.csv\"),   col_types = list(gear = col_factor(levels = c(gear = c(\"3\", \"4\", \"5\")))) ) #> # A tibble: 32 × 12 #>   model       mpg   cyl  disp    hp  drat    wt  qsec    vs    am gear  #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <fct> #> 1 Mazda RX4  21       6   160   110  3.9   2.62  16.5     0     1 4     #> 2 Mazda RX…  21       6   160   110  3.9   2.88  17.0     0     1 4     #> 3 Datsun 7…  22.8     4   108    93  3.85  2.32  18.6     1     1 4     #> # ℹ 29 more rows #> # ℹ 1 more variable: carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"name-repair","dir":"Articles","previous_headings":"","what":"Name repair","title":"Get started with vroom","text":"Often names columns original dataset ideal work . vroom() uses .name_repair argument tibble, can use one default name repair strategies provide custom function. great approach use janitor::make_clean_names() function input. automatically clean names use whatever case specify, setting use ALLCAPS names.","code":"vroom(   vroom_example(\"mtcars.csv\"),   .name_repair = ~ janitor::make_clean_names(., case = \"all_caps\") )"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"writing-delimited-files","dir":"Articles","previous_headings":"","what":"Writing delimited files","title":"Get started with vroom","text":"Use vroom_write() write delimited files, default delimiter tab, write TSV files. Writing TSV default following benefits: - Avoids issue whether use ; (common Europe) , (common US) - Unlikely require quoting fields, fields contain tabs - easily efficiently ingested Unix command line tools cut, perl awk.","code":"vroom_write(mtcars, \"mtcars.tsv\")"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"writing-csv-delimited-files","dir":"Articles","previous_headings":"Writing delimited files","what":"Writing CSV delimited files","title":"Get started with vroom","text":"However can also use delim = ',' write CSV files, common inputs GUI spreadsheet tools like Excel Google Sheets.","code":"vroom_write(mtcars, \"mtcars.csv\", delim = \",\")"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"writing-compressed-files","dir":"Articles","previous_headings":"Writing delimited files","what":"Writing compressed files","title":"Get started with vroom","text":"gzip, bzip2 xz compression outputs automatically compressed filename ends .gz, .bz2 .xz. also possible use compressors using pipe() vroom_write() create pipe connection command line utilities, pigz, parallel gzip implementation lbzip2, parallel bzip2 implementation pixz, parallel xz implementation Zstandard, modern real-time compression algorithm. parallel compression versions can considerably faster large output files generally vroom_write() fast enough compression speed becomes bottleneck writing.","code":"vroom_write(mtcars, \"mtcars.tsv.gz\")  vroom_write(mtcars, \"mtcars.tsv.bz2\")  vroom_write(mtcars, \"mtcars.tsv.xz\") vroom_write(mtcars, pipe(\"pigz > mtcars.tsv.gz\"))"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"reading-and-writing-from-standard-input-and-output","dir":"Articles","previous_headings":"Writing delimited files","what":"Reading and writing from standard input and output","title":"Get started with vroom","text":"vroom supports reading writing C-level stdin stdout R process using stdin() stdout(). E.g. shell prompt can pipe vroom directly. Note interpretation stdin() stdout() differs used elsewhere R, however believe better matches user’s expectations use case.","code":"cat inst/extdata/mtcars.csv | Rscript -e 'vroom::vroom(stdin())'  Rscript -e 'vroom::vroom_write(iris, stdout())' | head"},{"path":"https://vroom.r-lib.org/dev/articles/vroom.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Get started with vroom","text":"vignette(\"benchmarks\") discusses performance vroom, compares alternatives achieves results. 📽 vroom: Life short read slow - Presentation vroom UseR!2019 (slides) 📹 vroom: Read write rectangular data quickly - video tour vroom features.","code":""},{"path":"https://vroom.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jim Hester. Author. Hadley Wickham. Author. Jennifer Bryan. Author, maintainer. Shelby Bearrows. Contributor. https://github.com/mandreyel/. Copyright holder.           mio library Jukka Jylänki. Copyright holder.           grisu3 implementation Mikkel Jørgensen. Copyright holder.           grisu3 implementation . Copyright holder, funder.","code":""},{"path":"https://vroom.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hester J, Wickham H, Bryan J (2025). vroom: Read Write Rectangular Text Data Quickly. R package version 1.6.6.9000, https://vroom.r-lib.org.","code":"@Manual{,   title = {vroom: Read and Write Rectangular Text Data Quickly},   author = {Jim Hester and Hadley Wickham and Jennifer Bryan},   year = {2025},   note = {R package version 1.6.6.9000},   url = {https://vroom.r-lib.org}, }"},{"path":"https://vroom.r-lib.org/dev/index.html","id":"vroom-","dir":"","previous_headings":"","what":"Read and Write Rectangular Text Data Quickly","title":"Read and Write Rectangular Text Data Quickly","text":"fastest delimited reader R, 1.23 GB/sec.  ’s impossible! can fast? vroom doesn’t stop actually read data, simply indexes record located can read later. vectors returned use Altrep framework lazily load data -demand accessed, pay use. lazy access done automatically, changes R data-manipulation code needed. vroom also uses multiple threads indexing, materializing non-character columns, writing improve performance.","code":""},{"path":"https://vroom.r-lib.org/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Read and Write Rectangular Text Data Quickly","text":"vroom nearly parsing features readr delimited fixed width files, including delimiter guessing* custom delimiters (including multi-byte* Unicode* delimiters) numeric types (double, integer, big integer*, number) logical types datetime types (datetime, date, time) categorical types (characters, factors) column selection, like dplyr::select()* skipping headers, comments blank lines quoted fields double backslashed escapes whitespace trimming windows newlines reading multiple files connections* embedded newlines headers fields** writing delimited files -needed quoting. robust invalid inputs (vroom extensively tested afl fuzz tester)*. * additional features readr. ** requires num_threads = 1.","code":""},{"path":"https://vroom.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read and Write Rectangular Text Data Quickly","text":"Install vroom CRAN : Alternatively, need development version GitHub install :","code":"install.packages(\"vroom\") # install.packages(\"pak\") pak::pak(\"tidyverse/vroom\")"},{"path":"https://vroom.r-lib.org/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read and Write Rectangular Text Data Quickly","text":"See getting started jump start use vroom! vroom uses interface readr specify column types.","code":"vroom::vroom(\"mtcars.tsv\",   col_types = list(cyl = \"i\", gear = \"f\",hp = \"i\", disp = \"_\",                    drat = \"_\", vs = \"l\", am = \"l\", carb = \"i\") ) #> # A tibble: 32 × 10 #>   model           mpg   cyl    hp    wt  qsec vs    am    gear   carb #>   <chr>         <dbl> <int> <int> <dbl> <dbl> <lgl> <lgl> <fct> <int> #> 1 Mazda RX4      21       6   110  2.62  16.5 FALSE TRUE  4         4 #> 2 Mazda RX4 Wag  21       6   110  2.88  17.0 FALSE TRUE  4         4 #> 3 Datsun 710     22.8     4    93  2.32  18.6 TRUE  TRUE  4         1 #> # ℹ 29 more rows"},{"path":"https://vroom.r-lib.org/dev/index.html","id":"reading-multiple-files","dir":"","previous_headings":"","what":"Reading multiple files","title":"Read and Write Rectangular Text Data Quickly","text":"vroom natively supports reading multiple files (even multiple connections!). First generate files read splitting nycflights dataset airline. sake example, ’ll just take first 2 lines file. can efficiently read one tibble passing filenames directly vroom. id argument can used request column reveals filename row originated .","code":"library(nycflights13) purrr::iwalk(   split(flights, flights$carrier),   ~ { .x$carrier[[1]]; vroom::vroom_write(head(.x, 2), glue::glue(\"flights_{.y}.tsv\"), delim = \"\\t\") } ) files <- fs::dir_ls(glob = \"flights*tsv\") files #> flights_9E.tsv flights_AA.tsv flights_AS.tsv flights_B6.tsv flights_DL.tsv  #> flights_EV.tsv flights_F9.tsv flights_FL.tsv flights_HA.tsv flights_MQ.tsv  #> flights_OO.tsv flights_UA.tsv flights_US.tsv flights_VX.tsv flights_WN.tsv  #> flights_YV.tsv vroom::vroom(files, id = \"source\") #> Rows: 32 Columns: 20 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr   (4): carrier, tailnum, origin, dest #> dbl  (14): year, month, day, dep_time, sched_dep_time, dep_delay, arr_time, ... #> dttm  (1): time_hour #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 20 #>   source          year month   day dep_time sched_dep_time dep_delay arr_time #>   <chr>          <dbl> <dbl> <dbl>    <dbl>          <dbl>     <dbl>    <dbl> #> 1 flights_9E.tsv  2013     1     1      810            810         0     1048 #> 2 flights_9E.tsv  2013     1     1     1451           1500        -9     1634 #> 3 flights_AA.tsv  2013     1     1      542            540         2      923 #> # ℹ 29 more rows #> # ℹ 12 more variables: sched_arr_time <dbl>, arr_delay <dbl>, carrier <chr>, #> #   flight <dbl>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, #> #   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>"},{"path":"https://vroom.r-lib.org/dev/index.html","id":"learning-more","dir":"","previous_headings":"","what":"Learning more","title":"Read and Write Rectangular Text Data Quickly","text":"Getting started vroom 📽 vroom: Life short read slow - Presentation UseR!2019 (slides) 📹 vroom: Read write rectangular data quickly - video tour vroom features.","code":""},{"path":"https://vroom.r-lib.org/dev/index.html","id":"benchmarks","dir":"","previous_headings":"","what":"Benchmarks","title":"Read and Write Rectangular Text Data Quickly","text":"speed quoted real 1.53G dataset 14,388,451 rows 11 columns, see benchmark article full details dataset bench/ code used retrieve data perform benchmarks.","code":""},{"path":"https://vroom.r-lib.org/dev/index.html","id":"environment-variables","dir":"","previous_headings":"","what":"Environment variables","title":"Read and Write Rectangular Text Data Quickly","text":"addition arguments vroom() function, can control behavior vroom environment variables. Generally need set users. VROOM_TEMP_PATH - Path directory used store temporary files reading R connection. unset defaults R session’s temporary directory (tempdir()). VROOM_THREADS - number processor threads use indexing parsing. unset defaults parallel::detectCores(). VROOM_SHOW_PROGRESS - Whether show progress bar indexing. Regardless setting progress bar disabled non-interactive settings, R notebooks, running tests testthat knitting documents. VROOM_CONNECTION_SIZE - size (bytes) connection buffer reading connections (default 128 KiB). VROOM_WRITE_BUFFER_LINES - number lines use buffer writing files (default: 1000). also family variables control use Altrep framework. versions R Altrep framework unavailable (R < 3.5.0) automatically turned variables effect. variables can take one true, false, TRUE, FALSE, 1, 0. VROOM_USE_ALTREP_NUMERICS - set use Altrep numeric types (default false). also individual variables type. Currently VROOM_USE_ALTREP_CHR defaults true. VROOM_USE_ALTREP_CHR VROOM_USE_ALTREP_FCT VROOM_USE_ALTREP_INT VROOM_USE_ALTREP_BIG_INT VROOM_USE_ALTREP_DBL VROOM_USE_ALTREP_NUM VROOM_USE_ALTREP_LGL VROOM_USE_ALTREP_DTTM VROOM_USE_ALTREP_DATE VROOM_USE_ALTREP_TIME","code":""},{"path":"https://vroom.r-lib.org/dev/index.html","id":"rstudio-caveats","dir":"","previous_headings":"","what":"RStudio caveats","title":"Read and Write Rectangular Text Data Quickly","text":"RStudio’s environment pane calls object.size() refreshes pane, Altrep objects can extremely slow. RStudio 1.2.1335+ includes fixes (RStudio#4210, RStudio#4292) issue, recommended use least version.","code":""},{"path":"https://vroom.r-lib.org/dev/index.html","id":"thanks","dir":"","previous_headings":"","what":"Thanks","title":"Read and Write Rectangular Text Data Quickly","text":"Gabe Becker, Luke Tierney Tomas Kalibera conceiving, Implementing maintaining Altrep framework Romain François, whose Altrepisode package related blog-posts great guide creating new Altrep objects C++. Matt Dowle rest Rdatatable team, data.table::fread() blazing fast great motivation see fast go faster!","code":""},{"path":"https://vroom.r-lib.org/dev/reference/as.col_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a column specification — as.col_spec","title":"Coerce to a column specification — as.col_spec","text":"useful generating specification using short form coercing list.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/as.col_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a column specification — as.col_spec","text":"","code":"as.col_spec(x)"},{"path":"https://vroom.r-lib.org/dev/reference/as.col_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a column specification — as.col_spec","text":"x Input object","code":""},{"path":"https://vroom.r-lib.org/dev/reference/as.col_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a column specification — as.col_spec","text":"","code":"as.col_spec(\"cccnnn\") #> cols( #>   col_character(), #>   col_character(), #>   col_character(), #>   col_number(), #>   col_number(), #>   col_number() #> )"},{"path":"https://vroom.r-lib.org/dev/reference/cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Create column specification — cols","title":"Create column specification — cols","text":"cols() includes columns input data, guessing column types default. cols_only() includes columns explicitly specify, skipping rest.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create column specification — cols","text":"","code":"cols(..., .default = col_guess(), .delim = NULL)  cols_only(...)  col_logical(...)  col_integer(...)  col_big_integer(...)  col_double(...)  col_character(...)  col_skip(...)  col_number(...)  col_guess(...)  col_factor(levels = NULL, ordered = FALSE, include_na = FALSE, ...)  col_datetime(format = \"\", ...)  col_date(format = \"\", ...)  col_time(format = \"\", ...)"},{"path":"https://vroom.r-lib.org/dev/reference/cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create column specification — cols","text":"... Either column objects created col_*(), abbreviated character names (described col_types argument vroom()). overriding columns, best refer columns name. named, column types must match column names exactly. col_*() functions stored object. .default named columns explicitly overridden ... read column type. .delim delimiter use parsing. delim argument used call vroom() takes precedence one specified col_types. levels Character vector allowed levels. levels = NULL (default), levels discovered unique values x, order appear x. ordered ordered factor? include_na TRUE x contains least one NA, NA included levels constructed factor. format format specification, described . set \"\", date times parsed ISO8601, dates times used date time formats specified locale(). Unlike strptime(), format specification must match complete string.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create column specification — cols","text":"available specifications : (long names quotes string abbreviations brackets)","code":""},{"path":"https://vroom.r-lib.org/dev/reference/cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create column specification — cols","text":"","code":"cols(a = col_integer()) #> cols( #>   a = col_integer() #> ) cols_only(a = col_integer()) #> cols_only( #>   a = col_integer() #> )  # You can also use the standard abbreviations cols(a = \"i\") #> cols( #>   a = col_integer() #> ) cols(a = \"i\", b = \"d\", c = \"_\") #> cols( #>   a = col_integer(), #>   b = col_double(), #>   c = col_skip() #> )  # Or long names (like utils::read.csv) cols(a = \"integer\", b = \"double\", c = \"skip\") #> cols( #>   a = col_integer(), #>   b = col_double(), #>   c = col_skip() #> )  # You can also use multiple sets of column definitions by combining # them like so:  t1 <- cols(   column_one = col_integer(),   column_two = col_number())  t2 <- cols(  column_three = col_character())  t3 <- t1 t3$cols <- c(t1$cols, t2$cols) t3 #> cols( #>   column_one = col_integer(), #>   column_two = col_number(), #>   column_three = col_character() #> )"},{"path":"https://vroom.r-lib.org/dev/reference/date_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or retrieve date names — date_names","title":"Create or retrieve date names — date_names","text":"parsing dates, often need know weekdays week months represented text. pair functions allows either create , retrieve standard list. standard list derived ICU (https://site.icu-project.org) via stringi package.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/date_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or retrieve date names — date_names","text":"","code":"date_names(mon, mon_ab = mon, day, day_ab = day, am_pm = c(\"AM\", \"PM\"))  date_names_lang(language)  date_names_langs()"},{"path":"https://vroom.r-lib.org/dev/reference/date_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or retrieve date names — date_names","text":"mon, mon_ab Full abbreviated month names. day, day_ab Full abbreviated week day names. Starts Sunday. am_pm Names used PM. language BCP 47 locale, made language region, e.g. \"en_US\" American English. See date_names_langs() complete list available locales.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/date_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or retrieve date names — date_names","text":"","code":"date_names_lang(\"en\") #> <date_names> #> Days:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed), #>         Thursday (Thu), Friday (Fri), Saturday (Sat) #> Months: January (Jan), February (Feb), March (Mar), April (Apr), May #>         (May), June (Jun), July (Jul), August (Aug), September #>         (Sep), October (Oct), November (Nov), December (Dec) #> AM/PM:  AM/PM date_names_lang(\"ko\") #> <date_names> #> Days:   일요일 (일), 월요일 (월), 화요일 (화), 수요일 (수), 목요일 #>         (목), 금요일 (금), 토요일 (토) #> Months: 1월, 2월, 3월, 4월, 5월, 6월, 7월, 8월, 9월, 10월, 11월, 12월 #> AM/PM:  오전/오후 date_names_lang(\"fr\") #> <date_names> #> Days:   dimanche (dim.), lundi (lun.), mardi (mar.), mercredi (mer.), #>         jeudi (jeu.), vendredi (ven.), samedi (sam.) #> Months: janvier (janv.), février (févr.), mars (mars), avril (avr.), #>         mai (mai), juin (juin), juillet (juil.), août (août), #>         septembre (sept.), octobre (oct.), novembre (nov.), #>         décembre (déc.) #> AM/PM:  AM/PM"},{"path":"https://vroom.r-lib.org/dev/reference/gen_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random tibble — gen_tbl","title":"Generate a random tibble — gen_tbl","text":"useful benchmarking, also bug reports share real dataset.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/gen_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random tibble — gen_tbl","text":"","code":"gen_tbl(   rows,   cols = NULL,   col_types = NULL,   locale = default_locale(),   missing = 0 )"},{"path":"https://vroom.r-lib.org/dev/reference/gen_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random tibble — gen_tbl","text":"rows Number rows generate cols Number columns generate, NULL derived col_types. col_types One NULL, cols() specification, string. NULL, column types imputed guess_max rows input interspersed throughout file. convenient (fast), robust. imputation fails, need increase guess_max supply correct types . Column specifications created list() cols() must contain one column specification column. want read subset columns, use cols_only(). Alternatively, can use compact string representation character represents one column: c = character = integer n = number d = double l = logical f = factor D = date T = date time t = time ? = guess _ - = skip default, reading file without column specification print message showing readr guessed . remove message, set show_col_types = FALSE set options(readr.show_col_types = FALSE). locale locale controls defaults vary place place. default locale US-centric (like R), can use locale() create locale controls things like default time zone, encoding, decimal mark, big mark, day/month names. missing percentage (0 1) missing data use","code":""},{"path":"https://vroom.r-lib.org/dev/reference/gen_tbl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a random tibble — gen_tbl","text":"also family functions generate individual vectors type.","code":""},{"path":[]},{"path":"https://vroom.r-lib.org/dev/reference/gen_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a random tibble — gen_tbl","text":"","code":"# random 10 x 5 table with random column types rand_tbl <- gen_tbl(10, 5) rand_tbl #> # A tibble: 10 × 5 #>    X1                  X2         X3                  X4         #>    <dttm>              <date>     <dttm>              <date>     #>  1 2016-06-14 06:28:16 2008-02-28 2007-01-07 13:39:24 2007-05-02 #>  2 2018-06-29 22:59:16 2010-07-31 2013-09-24 09:09:05 2018-03-26 #>  3 2004-07-01 22:35:26 2020-10-17 2010-08-01 06:35:02 2003-10-20 #>  4 2001-09-08 03:11:25 2013-09-25 2009-08-24 00:15:53 2004-07-13 #>  5 2007-05-30 10:01:34 2019-12-09 2015-02-17 11:58:49 2018-02-21 #>  6 2009-01-18 00:11:12 2010-03-26 2019-12-22 08:26:43 2003-07-19 #>  7 2004-11-30 08:50:07 2006-06-04 2004-08-10 08:59:34 2016-06-19 #>  8 2009-01-26 20:18:09 2013-09-16 2005-05-04 10:53:10 2012-09-15 #>  9 2002-04-11 01:07:36 2012-05-28 2014-08-09 14:09:45 2009-11-30 #> 10 2008-10-10 11:06:51 2006-08-09 2010-12-24 01:36:44 2006-09-01 #> # ℹ 1 more variable: X5 <dttm>  # all double 25 x 4 table dbl_tbl <- gen_tbl(25, 4, col_types = \"dddd\") dbl_tbl #> # A tibble: 25 × 4 #>         X1        X2     X3     X4 #>      <dbl>     <dbl>  <dbl>  <dbl> #>  1 -0.872   0.000480  2.58   2.13  #>  2  0.107   0.755    -0.789  0.704 #>  3 -0.587   0.342     0.588  0.715 #>  4 -0.328   0.168    -0.711 -1.09  #>  5 -0.0854  1.40      1.58   0.402 #>  6 -2.05   -0.679     0.676  0.404 #>  7  0.151   0.738    -0.233  2.04  #>  8 -0.293  -0.861     0.637  1.14  #>  9  0.255   0.421    -1.37  -0.777 #> 10 -0.553   1.45     -1.43  -0.280 #> # ℹ 15 more rows  # Use the dots in long form column types to change the random function and options types <- rep(times = 4, list(col_double(f = stats::runif, min = -10, max = 25))) types #> [[1]] #> <collector_double> #>  #> [[2]] #> <collector_double> #>  #> [[3]] #> <collector_double> #>  #> [[4]] #> <collector_double> #>  dbl_tbl2 <- gen_tbl(25, 4, col_types = types) dbl_tbl2 #> # A tibble: 25 × 4 #>       X1    X2    X3    X4 #>    <dbl> <dbl> <dbl> <dbl> #>  1  9.14 21.7  -4.04  6.07 #>  2 -6.64 -8.74 17.4  10.9  #>  3  3.59 -5.40 -8.92 -4.22 #>  4 -3.97 -6.71 17.6   9.84 #>  5 14.2  14.4  -4.17 21.4  #>  6 13.6   4.20 -9.00 10.8  #>  7 23.1  -7.70 17.5  19.1  #>  8 -3.13 -5.57 18.9  10.8  #>  9 23.9  22.8  23.8  17.3  #> 10  3.55 -2.43  3.25  3.92 #> # ℹ 15 more rows"},{"path":"https://vroom.r-lib.org/dev/reference/generators.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate individual vectors of the types supported by vroom — generators","title":"Generate individual vectors of the types supported by vroom — generators","text":"Generate individual vectors types supported vroom","code":""},{"path":"https://vroom.r-lib.org/dev/reference/generators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate individual vectors of the types supported by vroom — generators","text":"","code":"gen_character(n, min = 5, max = 25, values = c(letters, LETTERS, 0:9), ...)  gen_double(n, f = stats::rnorm, ...)  gen_number(n, f = stats::rnorm, ...)  gen_integer(n, min = 1L, max = .Machine$integer.max, prob = NULL, ...)  gen_factor(   n,   levels = NULL,   ordered = FALSE,   num_levels = gen_integer(1L, 1L, 25L),   ... )  gen_time(n, min = 0, max = hms::hms(days = 1), fractional = FALSE, ...)  gen_date(n, min = as.Date(\"2001-01-01\"), max = as.Date(\"2021-01-01\"), ...)  gen_datetime(   n,   min = as.POSIXct(\"2001-01-01\"),   max = as.POSIXct(\"2021-01-01\"),   tz = \"UTC\",   ... )  gen_logical(n, ...)  gen_name(n)"},{"path":"https://vroom.r-lib.org/dev/reference/generators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate individual vectors of the types supported by vroom — generators","text":"n size vector generate min minimum range vector max maximum range vector values explicit values use. ... Additional arguments passed internal generation functions f random function use. prob vector probability weights obtaining elements     vector sampled. levels explicit levels use, NULL random levels generated using gen_name(). ordered factors ordered factors? num_levels number factor levels generate fractional Whether generate times fractional seconds tz timezone use dates","code":""},{"path":"https://vroom.r-lib.org/dev/reference/generators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate individual vectors of the types supported by vroom — generators","text":"","code":"# characters gen_character(4) #> [1] \"uX3Rn9MtoVUelMsC1KjUGn5z9\" \"P3eQ0mGW55S4wwHpdx7RH\"     #> [3] \"3AMTCdfwY6W2T\"             \"2QfFHPVHD\"                  # factors gen_factor(4) #> [1] old_springbok    rapid_lizard     clever_ram       angry_hartebeest #> 14 Levels: powerful_chameleon clever_ram ... panicky_lion  # logical gen_logical(4) #> [1] FALSE  TRUE FALSE FALSE  # numbers gen_double(4) #> [1] -0.072655731 -0.024083976  1.584497498  0.005675627 gen_integer(4) #> [1] 1109964342 2012064061 1272386238 1652478883  # temporal data gen_time(4) #> 17:25:06 #> 08:48:57 #> 12:33:44 #> 11:16:37 gen_date(4) #> [1] \"2018-09-08\" \"2003-11-17\" \"2014-05-30\" \"2009-11-16\" gen_datetime(4) #> [1] \"2013-12-28 15:25:30 UTC\" \"2004-03-07 17:59:08 UTC\" #> [3] \"2006-11-16 20:23:19 UTC\" \"2018-10-29 20:03:46 UTC\""},{"path":"https://vroom.r-lib.org/dev/reference/guess_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess the type of a vector — guess_type","title":"Guess the type of a vector — guess_type","text":"Guess type vector","code":""},{"path":"https://vroom.r-lib.org/dev/reference/guess_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess the type of a vector — guess_type","text":"","code":"guess_type(   x,   na = c(\"\", \"NA\"),   locale = default_locale(),   guess_integer = FALSE )"},{"path":"https://vroom.r-lib.org/dev/reference/guess_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess the type of a vector — guess_type","text":"x Character vector values parse. na Character vector strings interpret missing values. Set option character() indicate missing values. locale locale controls defaults vary place place. default locale US-centric (like R), can use locale() create locale controls things like default time zone, encoding, decimal mark, big mark, day/month names. guess_integer TRUE, guess integer types whole numbers, FALSE guess numeric type numbers.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/guess_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess the type of a vector — guess_type","text":"","code":"# Logical vectors  guess_type(c(\"FALSE\", \"TRUE\", \"F\", \"T\")) #> <collector_logical>  # Integers and doubles  guess_type(c(\"1\",\"2\",\"3\")) #> <collector_double>  guess_type(c(\"1.6\",\"2.6\",\"3.4\")) #> <collector_double>  # Numbers containing grouping mark  guess_type(\"1,234,566\") #> <collector_number>  # ISO 8601 date times  guess_type(c(\"2010-10-10\")) #> <collector_date>  guess_type(c(\"2010-10-10 01:02:03\")) #> <collector_datetime>  guess_type(c(\"01:02:03 AM\")) #> <collector_time>"},{"path":"https://vroom.r-lib.org/dev/reference/locale.html","id":null,"dir":"Reference","previous_headings":"","what":"Create locales — locale","title":"Create locales — locale","text":"locale object tries capture defaults can vary countries. set locale , details automatically passed columns parsers. defaults chosen match R (.e. US English) closely possible. See vignette(\"locales\") details.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/locale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create locales — locale","text":"","code":"locale(   date_names = \"en\",   date_format = \"%AD\",   time_format = \"%AT\",   decimal_mark = \".\",   grouping_mark = \",\",   tz = \"UTC\",   encoding = \"UTF-8\" )  default_locale()"},{"path":"https://vroom.r-lib.org/dev/reference/locale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create locales — locale","text":"date_names Character representations day month names. Either language code string (passed date_names_lang()) object created date_names(). date_format, time_format Default date time formats. decimal_mark, grouping_mark Symbols used indicate decimal place, chunk larger numbers. Decimal mark can , .. tz Default tz. used input (time zone present individual strings), output (control default display). default use \"UTC\", time zone use daylight savings time (DST) hence typically useful data. absence time zones makes approximately 50x faster generate UTC times time zone. Use \"\" use system default time zone, beware reproducible across systems. complete list possible time zones, see OlsonNames(). Americans, note \"EST\" Canadian time zone DST. Eastern Standard Time. better use \"US/Eastern\", \"US/Central\" etc. encoding Default encoding.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/locale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create locales — locale","text":"","code":"locale() #> <locale> #> Numbers:  123,456.78 #> Formats:  %AD / %AT #> Timezone: UTC #> Encoding: UTF-8 #> <date_names> #> Days:   Sunday (Sun), Monday (Mon), Tuesday (Tue), Wednesday (Wed), #>         Thursday (Thu), Friday (Fri), Saturday (Sat) #> Months: January (Jan), February (Feb), March (Mar), April (Apr), May #>         (May), June (Jun), July (Jul), August (Aug), September #>         (Sep), October (Oct), November (Nov), December (Dec) #> AM/PM:  AM/PM locale(\"fr\") #> <locale> #> Numbers:  123,456.78 #> Formats:  %AD / %AT #> Timezone: UTC #> Encoding: UTF-8 #> <date_names> #> Days:   dimanche (dim.), lundi (lun.), mardi (mar.), mercredi (mer.), #>         jeudi (jeu.), vendredi (ven.), samedi (sam.) #> Months: janvier (janv.), février (févr.), mars (mars), avril (avr.), #>         mai (mai), juin (juin), juillet (juil.), août (août), #>         septembre (sept.), octobre (oct.), novembre (nov.), #>         décembre (déc.) #> AM/PM:  AM/PM  # South American locale locale(\"es\", decimal_mark = \",\") #> <locale> #> Numbers:  123.456,78 #> Formats:  %AD / %AT #> Timezone: UTC #> Encoding: UTF-8 #> <date_names> #> Days:   domingo (dom.), lunes (lun.), martes (mar.), miércoles (mié.), #>         jueves (jue.), viernes (vie.), sábado (sáb.) #> Months: enero (ene.), febrero (feb.), marzo (mar.), abril (abr.), mayo #>         (may.), junio (jun.), julio (jul.), agosto (ago.), #>         septiembre (sept.), octubre (oct.), noviembre (nov.), #>         diciembre (dic.) #> AM/PM:  a. m./p. m."},{"path":"https://vroom.r-lib.org/dev/reference/output_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess column for output — output_column","title":"Preprocess column for output — output_column","text":"generic function applied column saved disk. provides hook S3 classes need special handling.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/output_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess column for output — output_column","text":"","code":"output_column(x)"},{"path":"https://vroom.r-lib.org/dev/reference/output_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess column for output — output_column","text":"x vector","code":""},{"path":"https://vroom.r-lib.org/dev/reference/output_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess column for output — output_column","text":"","code":"# Most types are returned unchanged output_column(1) #> [1] 1 output_column(\"x\") #> [1] \"x\"  # datetimes are formatted in ISO 8601 output_column(Sys.Date()) #> [1] \"2025-09-19\" output_column(Sys.time()) #> [1] \"2025-09-19T11:46:24Z\""},{"path":"https://vroom.r-lib.org/dev/reference/problems.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve parsing problems — problems","title":"Retrieve parsing problems — problems","text":"vroom fail parse file file invalid way unrecoverable. However number non-fatal problems might want know . can retrieve data frame problems function.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/problems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve parsing problems — problems","text":"","code":"problems(x = .Last.value, lazy = FALSE)"},{"path":"https://vroom.r-lib.org/dev/reference/problems.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve parsing problems — problems","text":"x data frame vroom::vroom(). lazy TRUE, just problems found far returned. FALSE (default) lazy data first read completely problems returned.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/problems.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve parsing problems — problems","text":"data frame one row problem four columns: row,col - Row column number caused problem, referencing original input expected - vroom expected find actual - actually found file - file problem","code":""},{"path":"https://vroom.r-lib.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tidyselect contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with","code":""},{"path":"https://vroom.r-lib.org/dev/reference/spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Examine the column specifications for a data frame — cols_condense","title":"Examine the column specifications for a data frame — cols_condense","text":"cols_condense() takes spec object condenses definition setting default column type frequent type listing columns different type. spec() extracts full column specification tibble created readr.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examine the column specifications for a data frame — cols_condense","text":"","code":"cols_condense(x)  spec(x)"},{"path":"https://vroom.r-lib.org/dev/reference/spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examine the column specifications for a data frame — cols_condense","text":"x data frame object extract ","code":""},{"path":"https://vroom.r-lib.org/dev/reference/spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examine the column specifications for a data frame — cols_condense","text":"col_spec object.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Examine the column specifications for a data frame — cols_condense","text":"","code":"df <- vroom(vroom_example(\"mtcars.csv\")) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. s <- spec(df) s #> cols( #>   model = col_character(), #>   mpg = col_double(), #>   cyl = col_double(), #>   disp = col_double(), #>   hp = col_double(), #>   drat = col_double(), #>   wt = col_double(), #>   qsec = col_double(), #>   vs = col_double(), #>   am = col_double(), #>   gear = col_double(), #>   carb = col_double(), #>   .delim = \",\" #> )  cols_condense(s) #> cols( #>   .default = col_double(), #>   model = col_character(), #>   .delim = \",\" #> )"},{"path":"https://vroom.r-lib.org/dev/reference/vroom-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vroom: Read and Write Rectangular Text Data Quickly — vroom-package","title":"vroom: Read and Write Rectangular Text Data Quickly — vroom-package","text":"goal 'vroom' read write data (like 'csv', 'tsv' 'fwf') quickly. reading uses quick initial indexing step, reads values lazily , data actually use needs read. writer formats data parallel writes disk asynchronously formatting.","code":""},{"path":[]},{"path":"https://vroom.r-lib.org/dev/reference/vroom-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vroom: Read and Write Rectangular Text Data Quickly — vroom-package","text":"Maintainer: Jennifer Bryan jenny@posit.co (ORCID) Authors: Jim Hester (ORCID) Hadley Wickham hadley@posit.co (ORCID) contributors: Shelby Bearrows [contributor] https://github.com/mandreyel/ (mio library) [copyright holder] Jukka Jylänki (grisu3 implementation) [copyright holder] Mikkel Jørgensen (grisu3 implementation) [copyright holder] Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a delimited file into a tibble — vroom","title":"Read a delimited file into a tibble — vroom","text":"Read delimited file tibble","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a delimited file into a tibble — vroom","text":"","code":"vroom(   file,   delim = NULL,   col_names = TRUE,   col_types = NULL,   col_select = NULL,   id = NULL,   skip = 0,   n_max = Inf,   na = c(\"\", \"NA\"),   quote = \"\\\"\",   comment = \"\",   skip_empty_rows = TRUE,   trim_ws = TRUE,   escape_double = TRUE,   escape_backslash = FALSE,   locale = default_locale(),   guess_max = 100,   altrep = TRUE,   altrep_opts = deprecated(),   num_threads = vroom_threads(),   progress = vroom_progress(),   show_col_types = NULL,   .name_repair = \"unique\" )"},{"path":"https://vroom.r-lib.org/dev/reference/vroom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a delimited file into a tibble — vroom","text":"file Either path file, connection, literal data (either single string raw vector). file can also character vector containing multiple filepaths list containing multiple connections. Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, wrap input (). delim One characters used delimit fields within file. NULL delimiter guessed set c(\",\", \"\\t\", \" \", \"|\", \":\", \";\"). col_names Either TRUE, FALSE character vector column names. TRUE, first row input used column names, included data frame. FALSE, column names generated automatically: X1, X2, X3 etc. col_names character vector, values used names columns, first row input read first row output data frame. Missing (NA) column names generate warning, filled dummy names ...1, ...2 etc. Duplicate column names generate warning made unique, see name_repair control done. col_types One NULL, cols() specification, string. NULL, column types imputed guess_max rows input interspersed throughout file. convenient (fast), robust. imputation fails, need increase guess_max supply correct types . Column specifications created list() cols() must contain one column specification column. want read subset columns, use cols_only(). Alternatively, can use compact string representation character represents one column: c = character = integer n = number d = double l = logical f = factor D = date T = date time t = time ? = guess _ - = skip default, reading file without column specification print message showing readr guessed . remove message, set show_col_types = FALSE set options(readr.show_col_types = FALSE). col_select Columns include results. can use mini-language dplyr::select() refer columns name. Use c() use one selection expression. Although usage less common, col_select also accepts numeric column index. See ?tidyselect::language full details selection language. id Either string 'NULL'. string, output contain variable name filename(s) value. 'NULL', default, variable created. skip Number lines skip reading data. comment supplied commented lines ignored skipping. n_max Maximum number lines read. na Character vector strings interpret missing values. Set option character() indicate missing values. quote Single character used quote strings. comment string used identify comments. text comment characters silently ignored. skip_empty_rows blank rows ignored altogether? .e. option TRUE blank rows represented .  FALSE represented NA values columns. trim_ws leading trailing whitespace (ASCII spaces tabs) trimmed field parsing ? escape_double file escape quotes doubling ? .e. option TRUE, value '\"\"' represents single quote, '\"'. escape_backslash file use backslashes escape special characters? general escape_double backslashes can used escape delimiter character, quote character, add special characters like \\\\n. locale locale controls defaults vary place place. default locale US-centric (like R), can use locale() create locale controls things like default time zone, encoding, decimal mark, big mark, day/month names. guess_max Maximum number lines use guessing column types. See vignette(\"column-types\", package = \"readr\") details. altrep Control column types use Altrep representations, either character vector types, TRUE FALSE. See vroom_altrep() full details. altrep_opts  num_threads Number threads use reading materializing vectors. data contains newlines within fields parser automatically forced use single thread . progress Display progress bar? default display interactive session knitting document. automatic progress bar can disabled setting option readr.show_progress FALSE. show_col_types Control showing column specifications. TRUE column specifications always show, FALSE never shown. NULL (default) shown explicit specification given col_types. .name_repair Handling column names. default behaviour ensure column names \"unique\". Various repair strategies supported: \"minimal\": name repair checks, beyond basic existence names. \"unique\" (default value): Make sure names unique empty. \"check_unique\": name repair, check unique. \"universal\": Make names unique syntactic. function: apply custom name repair (e.g., name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function(). argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce .","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a delimited file into a tibble — vroom","text":"","code":"# get path to example file input_file <- vroom_example(\"mtcars.csv\") input_file #> [1] \"/home/runner/work/_temp/Library/vroom/extdata/mtcars.csv\"  # Read from a path  # Input sources ------------------------------------------------------------- # Read from a path vroom(input_file) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>    model      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>    <chr>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Mazda R…  21       6  160    110  3.9   2.62  16.5     0     1     4 #>  2 Mazda R…  21       6  160    110  3.9   2.88  17.0     0     1     4 #>  3 Datsun …  22.8     4  108     93  3.85  2.32  18.6     1     1     4 #>  4 Hornet …  21.4     6  258    110  3.08  3.22  19.4     1     0     3 #>  5 Hornet …  18.7     8  360    175  3.15  3.44  17.0     0     0     3 #>  6 Valiant   18.1     6  225    105  2.76  3.46  20.2     1     0     3 #>  7 Duster …  14.3     8  360    245  3.21  3.57  15.8     0     0     3 #>  8 Merc 24…  24.4     4  147.    62  3.69  3.19  20       1     0     4 #>  9 Merc 230  22.8     4  141.    95  3.92  3.15  22.9     1     0     4 #> 10 Merc 280  19.2     6  168.   123  3.92  3.44  18.3     1     0     4 #> # ℹ 22 more rows #> # ℹ 1 more variable: carb <dbl> # You can also use paths directly # vroom(\"mtcars.csv\")  if (FALSE) { # \\dontrun{ # Including remote paths vroom(\"https://github.com/tidyverse/vroom/raw/main/inst/extdata/mtcars.csv\") } # }  # Or directly from a string with `I()` vroom(I(\"x,y\\n1,2\\n3,4\\n\")) #> Rows: 2 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): x, y #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 2 × 2 #>       x     y #>   <dbl> <dbl> #> 1     1     2 #> 2     3     4  # Column selection ---------------------------------------------------------- # Pass column names or indexes directly to select them vroom(input_file, col_select = c(model, cyl, gear)) #> Rows: 32 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): model #> dbl (2): cyl, gear #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 3 #>    model               cyl  gear #>    <chr>             <dbl> <dbl> #>  1 Mazda RX4             6     4 #>  2 Mazda RX4 Wag         6     4 #>  3 Datsun 710            4     4 #>  4 Hornet 4 Drive        6     3 #>  5 Hornet Sportabout     8     3 #>  6 Valiant               6     3 #>  7 Duster 360            8     3 #>  8 Merc 240D             4     4 #>  9 Merc 230              4     4 #> 10 Merc 280              6     4 #> # ℹ 22 more rows vroom(input_file, col_select = c(1, 3, 11)) #> Rows: 32 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): model #> dbl (2): cyl, gear #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 3 #>    model               cyl  gear #>    <chr>             <dbl> <dbl> #>  1 Mazda RX4             6     4 #>  2 Mazda RX4 Wag         6     4 #>  3 Datsun 710            4     4 #>  4 Hornet 4 Drive        6     3 #>  5 Hornet Sportabout     8     3 #>  6 Valiant               6     3 #>  7 Duster 360            8     3 #>  8 Merc 240D             4     4 #>  9 Merc 230              4     4 #> 10 Merc 280              6     4 #> # ℹ 22 more rows  # Or use the selection helpers vroom(input_file, col_select = starts_with(\"d\")) #> Rows: 32 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): disp, drat #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 2 #>     disp  drat #>    <dbl> <dbl> #>  1  160   3.9  #>  2  160   3.9  #>  3  108   3.85 #>  4  258   3.08 #>  5  360   3.15 #>  6  225   2.76 #>  7  360   3.21 #>  8  147.  3.69 #>  9  141.  3.92 #> 10  168.  3.92 #> # ℹ 22 more rows  # You can also rename specific columns vroom(input_file, col_select = c(car = model, everything())) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 32 × 12 #>    car        mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>    <chr>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Mazda R…  21       6  160    110  3.9   2.62  16.5     0     1     4 #>  2 Mazda R…  21       6  160    110  3.9   2.88  17.0     0     1     4 #>  3 Datsun …  22.8     4  108     93  3.85  2.32  18.6     1     1     4 #>  4 Hornet …  21.4     6  258    110  3.08  3.22  19.4     1     0     3 #>  5 Hornet …  18.7     8  360    175  3.15  3.44  17.0     0     0     3 #>  6 Valiant   18.1     6  225    105  2.76  3.46  20.2     1     0     3 #>  7 Duster …  14.3     8  360    245  3.21  3.57  15.8     0     0     3 #>  8 Merc 24…  24.4     4  147.    62  3.69  3.19  20       1     0     4 #>  9 Merc 230  22.8     4  141.    95  3.92  3.15  22.9     1     0     4 #> 10 Merc 280  19.2     6  168.   123  3.92  3.44  18.3     1     0     4 #> # ℹ 22 more rows #> # ℹ 1 more variable: carb <dbl>  # Column types -------------------------------------------------------------- # By default, vroom guesses the columns types, looking at 1000 rows # throughout the dataset. # You can specify them explicitly with a compact specification: vroom(I(\"x,y\\n1,2\\n3,4\\n\"), col_types = \"dc\") #> # A tibble: 2 × 2 #>       x y     #>   <dbl> <chr> #> 1     1 2     #> 2     3 4      # Or with a list of column types: vroom(I(\"x,y\\n1,2\\n3,4\\n\"), col_types = list(col_double(), col_character())) #> # A tibble: 2 × 2 #>       x y     #>   <dbl> <chr> #> 1     1 2     #> 2     3 4      # File types ---------------------------------------------------------------- # csv vroom(I(\"a,b\\n1.0,2.0\\n\"), delim = \",\") #> Rows: 1 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): a, b #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 1 × 2 #>       a     b #>   <dbl> <dbl> #> 1     1     2 # tsv vroom(I(\"a\\tb\\n1.0\\t2.0\\n\")) #> Rows: 1 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \"\\t\" #> dbl (2): a, b #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 1 × 2 #>       a     b #>   <dbl> <dbl> #> 1     1     2 # Other delimiters vroom(I(\"a|b\\n1.0|2.0\\n\"), delim = \"|\") #> Rows: 1 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \"|\" #> dbl (2): a, b #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 1 × 2 #>       a     b #>   <dbl> <dbl> #> 1     1     2  # Read datasets across multiple files --------------------------------------- mtcars_by_cyl <- vroom_example(vroom_examples(\"mtcars-\")) mtcars_by_cyl #> [1] \"/home/runner/work/_temp/Library/vroom/extdata/mtcars-4.csv\"         #> [2] \"/home/runner/work/_temp/Library/vroom/extdata/mtcars-6.csv\"         #> [3] \"/home/runner/work/_temp/Library/vroom/extdata/mtcars-8.csv\"         #> [4] \"/home/runner/work/_temp/Library/vroom/extdata/mtcars-multi-cyl.zip\"  # Pass the filenames directly to vroom, they are efficiently combined vroom(mtcars_by_cyl) #> Rows: 43 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 43 × 12 #>    model      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear #>    <chr>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Datsun …  22.8     4 108      93  3.85  2.32  18.6     1     1     4 #>  2 Merc 24…  24.4     4 147.     62  3.69  3.19  20       1     0     4 #>  3 Merc 230  22.8     4 141.     95  3.92  3.15  22.9     1     0     4 #>  4 Fiat 128  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4 #>  5 Honda C…  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4 #>  6 Toyota …  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4 #>  7 Toyota …  21.5     4 120.     97  3.7   2.46  20.0     1     0     3 #>  8 Fiat X1…  27.3     4  79      66  4.08  1.94  18.9     1     1     4 #>  9 Porsche…  26       4 120.     91  4.43  2.14  16.7     0     1     5 #> 10 Lotus E…  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5 #> # ℹ 33 more rows #> # ℹ 1 more variable: carb <dbl>  # If you need to extract data from the filenames, use `id` to request a # column that reveals the underlying file path dat <- vroom(mtcars_by_cyl, id = \"source\") #> Rows: 43 Columns: 13 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dat$source <- basename(dat$source) dat #> # A tibble: 43 × 13 #>    source   model   mpg   cyl  disp    hp  drat    wt  qsec    vs    am #>    <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 mtcars-… Dats…  22.8     4 108      93  3.85  2.32  18.6     1     1 #>  2 mtcars-… Merc…  24.4     4 147.     62  3.69  3.19  20       1     0 #>  3 mtcars-… Merc…  22.8     4 141.     95  3.92  3.15  22.9     1     0 #>  4 mtcars-… Fiat…  32.4     4  78.7    66  4.08  2.2   19.5     1     1 #>  5 mtcars-… Hond…  30.4     4  75.7    52  4.93  1.62  18.5     1     1 #>  6 mtcars-… Toyo…  33.9     4  71.1    65  4.22  1.84  19.9     1     1 #>  7 mtcars-… Toyo…  21.5     4 120.     97  3.7   2.46  20.0     1     0 #>  8 mtcars-… Fiat…  27.3     4  79      66  4.08  1.94  18.9     1     1 #>  9 mtcars-… Pors…  26       4 120.     91  4.43  2.14  16.7     0     1 #> 10 mtcars-… Lotu…  30.4     4  95.1   113  3.77  1.51  16.9     1     1 #> # ℹ 33 more rows #> # ℹ 2 more variables: gear <dbl>, carb <dbl>"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Show which column types are using Altrep — vroom_altrep","title":"Show which column types are using Altrep — vroom_altrep","text":"vroom_altrep() can used directly input altrep argument vroom().","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show which column types are using Altrep — vroom_altrep","text":"","code":"vroom_altrep(which = NULL)"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show which column types are using Altrep — vroom_altrep","text":"character vector column types use Altrep . Can also take TRUE FALSE use Altrep possible none types","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show which column types are using Altrep — vroom_altrep","text":"Alternatively also family environment variables control use Altrep framework. can set .Renviron file, e.g. usethis::edit_r_environ(). versions R Altrep framework unavailable (R < 3.5.0) automatically turned variables effect. variables can take one true, false, TRUE, FALSE, 1, 0. VROOM_USE_ALTREP_NUMERICS - set use Altrep numeric types (default false). also individual variables type. Currently VROOM_USE_ALTREP_CHR defaults true. VROOM_USE_ALTREP_CHR VROOM_USE_ALTREP_FCT VROOM_USE_ALTREP_INT VROOM_USE_ALTREP_BIG_INT VROOM_USE_ALTREP_DBL VROOM_USE_ALTREP_NUM VROOM_USE_ALTREP_LGL VROOM_USE_ALTREP_DTTM VROOM_USE_ALTREP_DATE VROOM_USE_ALTREP_TIME","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show which column types are using Altrep — vroom_altrep","text":"","code":"vroom_altrep() #> Using Altrep representations for: #>  * chr vroom_altrep(c(\"chr\", \"fct\", \"int\")) #> Using Altrep representations for: #>  * chr #>  * fct #>  * int vroom_altrep(TRUE) #> Using Altrep representations for: #>  * chr #>  * fct #>  * int #>  * dbl #>  * num #>  * lgl #>  * dttm #>  * date #>  * time #>  * big_int vroom_altrep(FALSE) #> Using Altrep representations for: #>  *"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Show which column types are using Altrep — vroom_altrep_opts","title":"Show which column types are using Altrep — vroom_altrep_opts","text":"function deprecated favor vroom_altrep().","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show which column types are using Altrep — vroom_altrep_opts","text":"","code":"vroom_altrep_opts(which = NULL)"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_altrep_opts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show which column types are using Altrep — vroom_altrep_opts","text":"character vector column types use Altrep . Can also take TRUE FALSE use Altrep possible none types","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to vroom examples — vroom_example","title":"Get path to vroom examples — vroom_example","text":"vroom comes bundled number sample files 'inst/extdata' directory. Use vroom_examples() list available examples vroom_example() retrieve path one example.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to vroom examples — vroom_example","text":"","code":"vroom_example(path)  vroom_examples(pattern = NULL)"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to vroom examples — vroom_example","text":"path Name file. pattern regular expression filenames match. NULL, available files returned.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to vroom examples — vroom_example","text":"","code":"# List all available examples vroom_examples() #>  [1] \"fwf-sample.txt\"       \"mtcars-4.csv\"         #>  [3] \"mtcars-6.csv\"         \"mtcars-8.csv\"         #>  [5] \"mtcars-multi-cyl.zip\" \"mtcars.csv\"           #>  [7] \"mtcars.csv.bz2\"       \"mtcars.csv.gz\"        #>  [9] \"mtcars.csv.xz\"        \"mtcars.csv.zip\"        # Get path to one example vroom_example(\"mtcars.csv\") #> [1] \"/home/runner/work/_temp/Library/vroom/extdata/mtcars.csv\""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame to a delimited string — vroom_format","title":"Convert a data frame to a delimited string — vroom_format","text":"equivalent vroom_write(), instead writing disk, returns string. primarily useful examples testing.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame to a delimited string — vroom_format","text":"","code":"vroom_format(   x,   delim = \"\\t\",   eol = \"\\n\",   na = \"NA\",   col_names = TRUE,   escape = c(\"double\", \"backslash\", \"none\"),   quote = c(\"needed\", \"all\", \"none\"),   bom = FALSE,   num_threads = vroom_threads() )"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame to a delimited string — vroom_format","text":"x data frame tibble write disk. delim Delimiter used separate values. Defaults \\t write tab separated value (TSV) files. eol end line character use. commonly either \"\\n\" Unix style newlines, \"\\r\\n\" Windows style newlines. na String used missing values. Defaults 'NA'. col_names FALSE, column names included top file. TRUE, column names included. specified, col_names take opposite value given append. escape type escape use quotes data. double - quotes escaped doubling . backslash - quotes escaped preceding backslash. none - quotes escaped. quote handle fields contain characters need quoted. needed - Values quoted needed: contain delimiter, quote, newline. - Quote fields. none - Never quote fields. bom TRUE add UTF-8 BOM beginning file. recommended saving data consumption excel, force excel read data correct encoding (UTF-8) num_threads Number threads use reading materializing vectors. data contains newlines within fields parser automatically forced use single thread .","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_fwf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a fixed width file into a tibble — vroom_fwf","title":"Read a fixed width file into a tibble — vroom_fwf","text":"Read fixed width file tibble","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_fwf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a fixed width file into a tibble — vroom_fwf","text":"","code":"vroom_fwf(   file,   col_positions = fwf_empty(file, skip, n = guess_max),   col_types = NULL,   col_select = NULL,   id = NULL,   locale = default_locale(),   na = c(\"\", \"NA\"),   comment = \"\",   skip_empty_rows = TRUE,   trim_ws = TRUE,   skip = 0,   n_max = Inf,   guess_max = 100,   altrep = TRUE,   altrep_opts = deprecated(),   num_threads = vroom_threads(),   progress = vroom_progress(),   show_col_types = NULL,   .name_repair = \"unique\" )  fwf_empty(file, skip = 0, col_names = NULL, comment = \"\", n = 100L)  fwf_widths(widths, col_names = NULL)  fwf_positions(start, end = NULL, col_names = NULL)  fwf_cols(...)"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_fwf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a fixed width file into a tibble — vroom_fwf","text":"file Either path file, connection, literal data (either single string raw vector). Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, input must either wrapped (), string containing least one new line, vector containing least one string new line. Using value clipboard() read system clipboard. col_positions Column positions, created fwf_empty(), fwf_widths() fwf_positions(). read selected fields, use fwf_positions(). width last column variable (ragged fwf file), supply last end position NA. col_types One NULL, cols() specification, string. See vignette(\"readr\") details. NULL, column types inferred guess_max rows input, interspersed throughout file. convenient (fast), robust. guessed types wrong, need increase guess_max supply correct types . Column specifications created list() cols() must contain one column specification column. want read subset columns, use cols_only(). Alternatively, can use compact string representation character represents one column: c = character = integer n = number d = double l = logical f = factor D = date T = date time t = time ? = guess _ - = skip default, reading file without column specification print message showing readr guessed . remove message, set show_col_types = FALSE set options(readr.show_col_types = FALSE). col_select Columns include results. can use mini-language dplyr::select() refer columns name. Use c() use one selection expression. Although usage less common, col_select also accepts numeric column index. See ?tidyselect::language full details selection language. id name column store file path. useful reading multiple input files data file paths, data collection date. NULL (default) extra column created. locale locale controls defaults vary place place. default locale US-centric (like R), can use locale() create locale controls things like default time zone, encoding, decimal mark, big mark, day/month names. na Character vector strings interpret missing values. Set option character() indicate missing values. comment string used identify comments. text comment characters silently ignored. skip_empty_rows blank rows ignored altogether? .e. option TRUE blank rows represented .  FALSE represented NA values columns. trim_ws leading trailing whitespace (ASCII spaces tabs) trimmed field parsing ? skip Number lines skip reading data. n_max Maximum number lines read. guess_max Maximum number lines use guessing column types. never use number lines read. See vignette(\"column-types\", package = \"readr\") details. altrep Control column types use Altrep representations, either character vector types, TRUE FALSE. See vroom_altrep() full details. altrep_opts  num_threads number processing threads use initial parsing lazy reading data. data contains newlines within fields parser automatically detect fall back using one thread . However know file newlines within quoted fields safest set num_threads = 1 explicitly. progress Display progress bar? default display interactive session knitting document. automatic progress bar can disabled setting option readr.show_progress FALSE. show_col_types FALSE, show guessed column types. TRUE always show column types, even supplied. NULL (default) show column types explicitly supplied col_types argument. .name_repair Handling column names. default behaviour ensure column names \"unique\". Various repair strategies supported: \"minimal\": name repair checks, beyond basic existence names. \"unique\" (default value): Make sure names unique empty. \"check_unique\": name repair, check unique. \"unique_quiet\": Repair unique strategy, quietly. \"universal\": Make names unique syntactic. \"universal_quiet\": Repair universal strategy, quietly. function: Apply custom name repair (e.g., name_repair = make.names names style base R). purrr-style anonymous function, see rlang::as_function(). argument passed repair vctrs::vec_as_names(). See details terms strategies used enforce . col_names Either NULL, character vector column names. n Number lines tokenizer read determine file structure. default set 100. widths Width field. Use NA width last field reading ragged fwf file. start, end Starting ending (inclusive) positions field. Use NA last end field reading ragged fwf file. ... first element data frame, must numeric columns either one two rows. column names variable names. column values variable widths length one vector, length two, variable start end positions. elements ... used construct data frame two rows .","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_fwf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a fixed width file into a tibble — vroom_fwf","text":"Note: fwf_empty() take R connection URL input, result reading connection twice. cases better download file first reading.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_fwf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a fixed width file into a tibble — vroom_fwf","text":"","code":"fwf_sample <- vroom_example(\"fwf-sample.txt\") writeLines(vroom_lines(fwf_sample)) #> John Smith          WA        418-Y11-4111 #> Mary Hartford       CA        319-Z19-4341 #> Evan Nolan          IL        219-532-c301  # You can specify column positions in several ways: # 1. Guess based on position of empty columns vroom_fwf(fwf_sample, fwf_empty(fwf_sample, col_names = c(\"first\", \"last\", \"state\", \"ssn\"))) #> Rows: 3 Columns: 4 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (4): first, last, state, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 4 #>   first last     state ssn          #>   <chr> <chr>    <chr> <chr>        #> 1 John  Smith    WA    418-Y11-4111 #> 2 Mary  Hartford CA    319-Z19-4341 #> 3 Evan  Nolan    IL    219-532-c301 # 2. A vector of field widths vroom_fwf(fwf_sample, fwf_widths(c(20, 10, 12), c(\"name\", \"state\", \"ssn\"))) #> Rows: 3 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (3): name, state, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 3 #>   name          state ssn          #>   <chr>         <chr> <chr>        #> 1 John Smith    WA    418-Y11-4111 #> 2 Mary Hartford CA    319-Z19-4341 #> 3 Evan Nolan    IL    219-532-c301 # 3. Paired vectors of start and end positions vroom_fwf(fwf_sample, fwf_positions(c(1, 30), c(20, 42), c(\"name\", \"ssn\"))) #> Rows: 3 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (2): name, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 2 #>   name          ssn          #>   <chr>         <chr>        #> 1 John Smith    418-Y11-4111 #> 2 Mary Hartford 319-Z19-4341 #> 3 Evan Nolan    219-532-c301 # 4. Named arguments with start and end positions vroom_fwf(fwf_sample, fwf_cols(name = c(1, 20), ssn = c(30, 42))) #> Rows: 3 Columns: 2 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (2): name, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 2 #>   name          ssn          #>   <chr>         <chr>        #> 1 John Smith    418-Y11-4111 #> 2 Mary Hartford 319-Z19-4341 #> 3 Evan Nolan    219-532-c301 # 5. Named arguments with column widths vroom_fwf(fwf_sample, fwf_cols(name = 20, state = 10, ssn = 12)) #> Rows: 3 Columns: 3 #> ── Column specification ─────────────────────────────────────────────── #>  #> chr (3): name, state, ssn #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 3 × 3 #>   name          state ssn          #>   <chr>         <chr> <chr>        #> 1 John Smith    WA    418-Y11-4111 #> 2 Mary Hartford CA    319-Z19-4341 #> 3 Evan Nolan    IL    219-532-c301"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Read lines from a file — vroom_lines","title":"Read lines from a file — vroom_lines","text":"vroom_lines() similar readLines(), however reads lines lazily like vroom(), operations like length(), head(), tail() sample() can done much efficiently without reading data R.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read lines from a file — vroom_lines","text":"","code":"vroom_lines(   file,   n_max = Inf,   skip = 0,   na = character(),   skip_empty_rows = FALSE,   locale = default_locale(),   altrep = TRUE,   altrep_opts = deprecated(),   num_threads = vroom_threads(),   progress = vroom_progress() )"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read lines from a file — vroom_lines","text":"file Either path file, connection, literal data (either single string raw vector). file can also character vector containing multiple filepaths list containing multiple connections. Files ending .gz, .bz2, .xz, .zip automatically uncompressed. Files starting http://, https://, ftp://, ftps:// automatically downloaded. Remote gz files can also automatically downloaded decompressed. Literal data useful examples tests. recognised literal data, wrap input (). n_max Maximum number lines read. skip Number lines skip reading data. comment supplied commented lines ignored skipping. na Character vector strings interpret missing values. Set option character() indicate missing values. skip_empty_rows blank rows ignored altogether? .e. option TRUE blank rows represented .  FALSE represented NA values columns. locale locale controls defaults vary place place. default locale US-centric (like R), can use locale() create locale controls things like default time zone, encoding, decimal mark, big mark, day/month names. altrep Control column types use Altrep representations, either character vector types, TRUE FALSE. See vroom_altrep() full details. altrep_opts  num_threads Number threads use reading materializing vectors. data contains newlines within fields parser automatically forced use single thread . progress Display progress bar? default display interactive session knitting document. automatic progress bar can disabled setting option readr.show_progress FALSE.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read lines from a file — vroom_lines","text":"","code":"lines <- vroom_lines(vroom_example(\"mtcars.csv\"))  length(lines) #> [1] 33 head(lines, n = 2) #> [1] \"model,mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\" #> [2] \"Mazda RX4,21,6,160,110,3.9,2.62,16.46,0,1,4,4\"      tail(lines, n = 2) #> [1] \"Maserati Bora,15,8,301,335,3.54,3.57,14.6,0,1,5,8\" #> [2] \"Volvo 142E,21.4,4,121,109,4.11,2.78,18.6,1,1,4,2\"  sample(lines, size = 2) #> [1] \"Porsche 914-2,26,4,120.3,91,4.43,2.14,16.7,0,1,5,2\" #> [2] \"model,mpg,cyl,disp,hp,drat,wt,qsec,vs,am,gear,carb\""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether progress bars should be shown — vroom_progress","title":"Determine whether progress bars should be shown — vroom_progress","text":"default, vroom shows progress bars. However, progress reporting suppressed following conditions hold: bar explicitly disabled setting environment variable VROOM_SHOW_PROGRESS \"false\". code run non-interactive session, determined rlang::is_interactive(). code run RStudio notebook chunk, determined getOption(\"rstudio.notebook.executing\").","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether progress bars should be shown — vroom_progress","text":"","code":"vroom_progress()"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine whether progress bars should be shown — vroom_progress","text":"","code":"vroom_progress() #> [1] FALSE"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_str.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of objects — vroom_str","title":"Structure of objects — vroom_str","text":"Similar str() information Altrep objects.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_str.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of objects — vroom_str","text":"","code":"vroom_str(x)"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_str.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of objects — vroom_str","text":"x vector","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_str.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structure of objects — vroom_str","text":"","code":"# when used on non-altrep objects altrep will always be false vroom_str(mtcars) #> 'data.frame': 32 obs., 11 vars.: #> $mpg:\taltrep:false\ttype: double\tlength:32 #> $cyl:\taltrep:false\ttype: double\tlength:32 #> $disp:\taltrep:false\ttype: double\tlength:32 #> $hp:\taltrep:false\ttype: double\tlength:32 #> $drat:\taltrep:false\ttype: double\tlength:32 #> $wt:\taltrep:false\ttype: double\tlength:32 #> $qsec:\taltrep:false\ttype: double\tlength:32 #> $vs:\taltrep:false\ttype: double\tlength:32 #> $am:\taltrep:false\ttype: double\tlength:32 #> $gear:\taltrep:false\ttype: double\tlength:32 #> $carb:\taltrep:false\ttype: double\tlength:32  mt <- vroom(vroom_example(\"mtcars.csv\"), \",\", altrep = c(\"chr\", \"dbl\")) #> Rows: 32 Columns: 12 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (1): model #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. vroom_str(mt) #> 'spec_tbl_df', 'tbl_df', 'tbl', and 'data.frame': 32 obs., 12 vars.: #> $model:\taltrep:true\ttype:vroom::vroom_chr\tlength:32\tmaterialized:false #> $mpg:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $cyl:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $disp:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $hp:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $drat:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $wt:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $qsec:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $vs:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $am:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $gear:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false #> $carb:\taltrep:true\ttype:vroom::vroom_dbl\tlength:32\tmaterialized:false"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a data frame to a delimited file — vroom_write","title":"Write a data frame to a delimited file — vroom_write","text":"Write data frame delimited file","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a data frame to a delimited file — vroom_write","text":"","code":"vroom_write(   x,   file,   delim = \"\\t\",   eol = \"\\n\",   na = \"NA\",   col_names = !append,   append = FALSE,   quote = c(\"needed\", \"all\", \"none\"),   escape = c(\"double\", \"backslash\", \"none\"),   bom = FALSE,   num_threads = vroom_threads(),   progress = vroom_progress(),   path = deprecated() )"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a data frame to a delimited file — vroom_write","text":"x data frame tibble write disk. file File connection write . delim Delimiter used separate values. Defaults \\t write tab separated value (TSV) files. eol end line character use. commonly either \"\\n\" Unix style newlines, \"\\r\\n\" Windows style newlines. na String used missing values. Defaults 'NA'. col_names FALSE, column names included top file. TRUE, column names included. specified, col_names take opposite value given append. append FALSE, overwrite existing file. TRUE, append existing file. cases, file exist new file created. quote handle fields contain characters need quoted. needed - Values quoted needed: contain delimiter, quote, newline. - Quote fields. none - Never quote fields. escape type escape use quotes data. double - quotes escaped doubling . backslash - quotes escaped preceding backslash. none - quotes escaped. bom TRUE add UTF-8 BOM beginning file. recommended saving data consumption excel, force excel read data correct encoding (UTF-8) num_threads Number threads use reading materializing vectors. data contains newlines within fields parser automatically forced use single thread . progress Display progress bar? default display interactive session knitting document. display updated every 50,000 values display estimated reading time 5 seconds . automatic progress bar can disabled setting option readr.show_progress FALSE. path longer supported, use file instead.","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a data frame to a delimited file — vroom_write","text":"","code":"# If you only specify a file name, vroom_write() will write # the file to your current working directory. out_file <- tempfile(fileext = \"csv\") vroom_write(mtcars, out_file, \",\")  # You can also use a literal filename # vroom_write(mtcars, \"mtcars.tsv\")  # If you add an extension to the file name, write_()* will # automatically compress the output. # vroom_write(mtcars, \"mtcars.tsv.gz\") # vroom_write(mtcars, \"mtcars.tsv.bz2\") # vroom_write(mtcars, \"mtcars.tsv.xz\")"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_write_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Write lines to a file — vroom_write_lines","title":"Write lines to a file — vroom_write_lines","text":"Write lines file","code":""},{"path":"https://vroom.r-lib.org/dev/reference/vroom_write_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write lines to a file — vroom_write_lines","text":"","code":"vroom_write_lines(   x,   file,   eol = \"\\n\",   na = \"NA\",   append = FALSE,   num_threads = vroom_threads() )"},{"path":"https://vroom.r-lib.org/dev/reference/vroom_write_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write lines to a file — vroom_write_lines","text":"x character vector. file File connection write . eol end line character use. commonly either \"\\n\" Unix style newlines, \"\\r\\n\" Windows style newlines. na String used missing values. Defaults 'NA'. append FALSE, overwrite existing file. TRUE, append existing file. cases, file exist new file created. num_threads Number threads use reading materializing vectors. data contains newlines within fields parser automatically forced use single thread .","code":""},{"path":[]},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-166","dir":"Changelog","previous_headings":"","what":"vroom 1.6.6","title":"vroom 1.6.6","text":"CRAN release: 2025-09-19 Fixed bad URL README CRAN’s request.","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-165","dir":"Changelog","previous_headings":"","what":"vroom 1.6.5","title":"vroom 1.6.5","text":"CRAN release: 2023-12-05 Internal changes requested CRAN around format specification (#524).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-164","dir":"Changelog","previous_headings":"","what":"vroom 1.6.4","title":"vroom 1.6.4","text":"CRAN release: 2023-10-02 now possible (?) read list connections (@bairdj, #514). Internal change compatibility cpp11 >= 0.4.6 (@DavisVaughan, #512).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-163","dir":"Changelog","previous_headings":"","what":"vroom 1.6.3","title":"vroom 1.6.3","text":"CRAN release: 2023-04-28 user-facing changes.","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-162","dir":"Changelog","previous_headings":"","what":"vroom 1.6.2","title":"vroom 1.6.2","text":"CRAN release version number.","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-161","dir":"Changelog","previous_headings":"","what":"vroom 1.6.1","title":"vroom 1.6.1","text":"CRAN release: 2023-01-22 str() now works colorized context presence column class integer64, .e. parsed col_big_integer() (@bart1, #477). embedded implementation Grisu algorithm printing floating point numbers now uses snprintf() instead sprintf() likewise vroom’s code (@jeroen, #480).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-160","dir":"Changelog","previous_headings":"","what":"vroom 1.6.0","title":"vroom 1.6.0","text":"CRAN release: 2022-09-30 vroom(col_select=) now handles column selection numeric position id column provided (#455). vroom(id = \"path\", col_select = :c) treated like vroom(id = \"path\", col_select = c(path, :c)). id column provided, automatically included output (#416). vroom_write(append = TRUE) modify existing file appending empty data frame. particular, overwrite (delete) existing contents file (https://github.com/tidyverse/readr/issues/1408, #451). vroom::problems() now defaults .Last.value primary input, similar readr::problems() works (#443). warning indicates existence parsing problems improved, make easier user follow-(https://github.com/tidyverse/readr/issues/1322). vroom() reads reliably filepaths containing non-ascii characters, non-UTF-8 locale (#394, #438). vroom_format() vroom_write() quote values contain delimiter, quote, newline. Specifically values equal na string (start ) longer quoted (#426). Fixed segfault reading multiple files first file header row column names, subsequent files least one row (#430). Fixed segfault vroom_format() given empty data frame (#425) Fixed segfault occur final field final line missing file also end newline (#429). Fixed recursive garbage collection error occur vroom_write() output_column() generates ALTREP vector (#389). vroom_progress() uses rlang::is_interactive() instead base::interactive(). col_factor(levels = NULL) honors na strings vroom() include_na argument, described docs, now reproduces behaviour readr’s first edition parser (#396).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-157","dir":"Changelog","previous_headings":"","what":"vroom 1.5.7","title":"vroom 1.5.7","text":"CRAN release: 2021-11-30 Jenny Bryan now official maintainer. Fix uninitialized bool detected CRAN’s UBSAN check (https://github.com/tidyverse/vroom/pull/386) Fix buffer overflow trying parse integer field 64 characters long (https://github.com/tidyverse/readr/issues/1326) Fix subset indexing indexes span file boundary multiple times (#383)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-156","dir":"Changelog","previous_headings":"","what":"vroom 1.5.6","title":"vroom 1.5.6","text":"CRAN release: 2021-11-10 vroom(col_select=) now works col_names = FALSE intended (#381) vroom(n_max=) now correctly handles cases reading connection file end newline (https://github.com/tidyverse/readr/issues/1321) vroom() longer issues spurious warning parsing needs restarted due presence embedded newlines (https://github.com/tidyverse/readr/issues/1313) Fix performance issue materializing subsetted vectors (#378) vroom_format() now uses internal multi-threaded code vroom_write(), improving performance cases (#377) vroom_fwf() longer omits last line end newline (https://github.com/tidyverse/readr/issues/1293) Empty files files header line data longer cause crash read multiple files (https://github.com/tidyverse/readr/issues/1297) Files header contents, empty file col_names = FALSE longer cause hang progress = TRUE (https://github.com/tidyverse/readr/issues/1297) Commented lines comments end lines longer hang R (https://github.com/tidyverse/readr/issues/1309) Comment lines containing unpaired quotes longer treated unterminated quotations (https://github.com/tidyverse/readr/issues/1307) Values Inf NaN prefix additional data afterwards, like Inform longer inappropriately guessed doubles (https://github.com/tidyverse/readr/issues/1319) Time types now support %h format denote hour durations greater 24, like readr (https://github.com/tidyverse/readr/issues/1312) Fix performance issue materializing subsetted vectors (#378)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-155","dir":"Changelog","previous_headings":"","what":"vroom 1.5.5","title":"vroom 1.5.5","text":"CRAN release: 2021-09-14 vroom() now supports files carriage return newlines (\\r). (#360, https://github.com/tidyverse/readr/issues/1236) vroom() now parses single digit datetimes consistently readr done (https://github.com/tidyverse/readr/issues/1276) vroom() now parses Inf values doubles (https://github.com/tidyverse/readr/issues/1283) vroom() now parses NaN values doubles (https://github.com/tidyverse/readr/issues/1277) VROOM_CONNECTION_SIZE now parsed double, supports scientific notation (#364) vroom() now works around specifying \\n delimiter (#365, https://github.com/tidyverse/dplyr/issues/5977) vroom() longer crashes given col_name col_type less number columns (https://github.com/tidyverse/readr/issues/1271) vroom() longer hangs given empty value locale(grouping_mark=) (https://github.com/tidyverse/readr/issues/1241) Fix performance regression guessing large numbers rows (https://github.com/tidyverse/readr/issues/1267)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-154","dir":"Changelog","previous_headings":"","what":"vroom 1.5.4","title":"vroom 1.5.4","text":"CRAN release: 2021-08-05 vroom(col_types=) now accepts column type names like accepted utils::read.table. e.g. vroom::vroom(col_types = list(= “integer”, b = “double”, c = “skip”)) vroom() now respects quote parameter properly first two lines file (https://github.com/tidyverse/readr/issues/1262) vroom_write() now always correctly writes output including column names UTF-8 (https://github.com/tidyverse/readr/issues/1242) vroom_write() now creates empty file given input without columns (https://github.com/tidyverse/readr/issues/1234)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-153","dir":"Changelog","previous_headings":"","what":"vroom 1.5.3","title":"vroom 1.5.3","text":"CRAN release: 2021-07-14 vroom(col_types=) now truncates column types user passes many types. (#355) vroom() now always includes last row guessing (#352) vroom(trim_ws = TRUE) now trims field content within quotes well without (#354). Previously vroom explicitly retained field content inside quotes regardless value trim_ws.","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-152","dir":"Changelog","previous_headings":"","what":"vroom 1.5.2","title":"vroom 1.5.2","text":"CRAN release: 2021-07-08 vroom() now supports inputs unnamed column types less number columns (#296) vroom() now outputs correct column names even presence skipped columns (#293, tidyverse/readr#1215) vroom_fwf(n_max=) now works intended input connection. vroom() vroom_write() now automatically detect compression format regardless file extension bzip2, xzip, gzip zip files (#348) vroom() vroom_write() now automatically support many archive formats thanks archive package. include new support writing zip files, reading writing 7zip, tar ISO files. vroom(num_threads = 1) now spawn threads. can used workaround systems without full thread support. Threads now automatically disabled non-macOS systems compiling clang’s libc++. systems non-macOS systems use common gcc libstdc++, effect users.","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-151","dir":"Changelog","previous_headings":"","what":"vroom 1.5.1","title":"vroom 1.5.1","text":"CRAN release: 2021-06-22 Parsers now treat NA values NA even valid values types (#342) Element-wise indexing lazy (ALTREP) vectors now much less overhead (#344)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-150","dir":"Changelog","previous_headings":"","what":"vroom 1.5.0","title":"vroom 1.5.0","text":"CRAN release: 2021-06-14","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"major-improvements-1-5-0","dir":"Changelog","previous_headings":"","what":"Major improvements","title":"vroom 1.5.0","text":"New vroom(show_col_types=) argument simply control column types shown. vroom(), vroom_fwf() vroom_lines() now support multi-byte encodings UTF-16 UTF-32 converting files UTF-8 hood (#138) vroom() now supports skipping comments blank lines within data, just start file (#294, #302) vroom() now uses tzdb package parsing date-times (@DavisVaughan, #273) vroom() now emits warning class vroom_parse_issue non-fatal parsing issues. vroom() now emits warning class vroom_mismatched_column_name user supplies column type match name read column (#317). vroom package now uses MIT license, part systematic relicensing throughout r-lib tidyverse packages (#323)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"minor-improvements-and-fixes-1-5-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"vroom 1.5.0","text":"`vroom() correctly reads double values comma decimal separator (@kent37 #313) vroom() now correctly skips lines one quote format doesn’t use quoting (https://github.com/tidyverse/readr/issues/991#issuecomment-616378446) vroom() vroom_lines() now handle files mixed windows POSIX line endings (https://github.com/tidyverse/readr/issues/1210) vroom() now outputs tibble expected number columns types based col_types col_names even file empty (#297). vroom() longer mis-indexes files read connections windows line endings two line endings falls separate sides read buffer (#331) vroom() longer crashes n_max = 0 col_names character (#316) vroom() now preserves spec attribute vroom readr loaded (#303) vroom() now allows specifying column names col_types repaired (#311) vroom() longer inadvertently calls .name_repair functions twice (#310). vroom() now robust quoting issues tracking CSV state (#301) vroom() now registers S3 class methods::setOldClass() (r-dbi/DBI#345) col_datetime() now supports ‘%s’ format, represents decimal seconds since Unix epoch. col_numeric() now supports grouping_mark decimal_mark unicode characters, U+00A0 commonly used grouping mark numbers France (https://github.com/tidyverse/readr/issues/796). vroom_fwf() gains skip_empty_rows argument skip empty lines (https://github.com/tidyverse/readr/issues/1211) vroom_fwf() now respects n_max, intended (#334) vroom_lines() gains na argument. vroom_write_lines() longer escapes quotes lines. vroom_write_lines() now works intended (#291). vroom_write(path=) deprecated, favor file, match readr. vroom_write_lines() now exposes num_threads argument. problems() now prints correct row number parse errors (#326) problems() now throws informative error called readr object (#308). problems() now de-duplicates identical problems (#318) Fix inadvertent performance regression reading values (#309) n_max argument correctly respected edge cases (#306) factors implicit levels now work fields quoted, intended (#330) Guessing double types longer unconditionally ignores leading whitespace. Now whitespace ignored trim_ws set.","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-140","dir":"Changelog","previous_headings":"","what":"vroom 1.4.0","title":"vroom 1.4.0","text":"CRAN release: 2021-02-01","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"major-changes-and-new-functions-1-4-0","dir":"Changelog","previous_headings":"","what":"Major changes and new functions","title":"vroom 1.4.0","text":"vroom now tracks indexing parsing errors like readr. first time issue encountered warning signaled. tibble found problems can retrieved vroom::problems(). (#247) Data newlines within quoted fields now automatically revert using single thread properly read (#282) NUL values character data now permitted, warning. New vroom_write_lines() function write character vector file (#291) vroom_write() gains eol= parameter specify end line character(s) use. Use vroom_write(eol = \"\\r\\n\") write file Windows style newlines (#263).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"minor-improvements-and-fixes-1-4-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"vroom 1.4.0","text":"Datetime formats used guessing now match used parsing (#240) Quotes now valid next newlines delimiters (#224) vroom() now signals R error invalid date datetime formats, instead crashing session (#220). vroom(comment = ) now accepts multi-character comments (#286) vroom_lines() now works empty files (#285) Vectors now subset properly given invalid subscripts (#283) vroom_write() now works delimiter empty, e.g. delim = \"\" (#287). vroom_write() now works ALTREP vectors, including string vectors (#270) internal call new.env() now correctly uses parent argument (#281)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-132","dir":"Changelog","previous_headings":"","what":"vroom 1.3.2","title":"vroom 1.3.2","text":"CRAN release: 2020-09-30 Test failures R 4.1 related factors NA values fixed (#262) vroom() now works without error readr versions col specs (#256, #264, #266)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-131","dir":"Changelog","previous_headings":"","what":"vroom 1.3.1","title":"vroom 1.3.1","text":"CRAN release: 2020-08-27 Test failures R 4.1 related POSIXct classes fixed (#260) Column subsetting double indexes now works (#257) vroom(n_max=) now partially downloads files connections, intended (#259)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-130","dir":"Changelog","previous_headings":"","what":"vroom 1.3.0","title":"vroom 1.3.0","text":"CRAN release: 2020-08-14 Rcpp dependency removed favor cpp11. vroom() now handles cases id set column skipped (#237) vroom() now supports column selections empty column names (#238) vroom() argument n_max now works properly files windows newlines final newline (#244) Subsetting vectors now works View() RStudio now rows subset (#253). Subsetting datetime columns now works NA indices (#236).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-121","dir":"Changelog","previous_headings":"","what":"vroom 1.2.1","title":"vroom 1.2.1","text":"CRAN release: 2020-05-12 vroom() now writes column names given input rows (#213) vroom() columns now support indexing NA values (#201) vroom() longer truncates last value file file contains windows newlines final newline (#219). vroom() now works na argument encoded non ASCII UTF-8 locales file encoding native encoding (#233). vroom_fwf() now verifies positions valid, namely begin value always less previous end (#217). vroom_lines() gains locale argument can control encoding file (#218) vroom_write() now supports append argument R connections (#232)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-120","dir":"Changelog","previous_headings":"","what":"vroom 1.2.0","title":"vroom 1.2.0","text":"CRAN release: 2020-01-13","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"vroom 1.2.0","text":"vroom_altrep_opts() argument vroom(altrep_opts =) renamed vroom_altrep() altrep respectively. prior names deprecated.","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"vroom 1.2.0","text":"vroom() now supports reading Big Integer values bit64 package. Use col_big_integer() “” shortcut read column big integers. (#198) cols() gains .delim argument vroom() now uses delimiter provided (#192) vroom() now supports reading stdin() directly, interpreted C-level standard input (#106).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"minor-improvements-and-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"vroom 1.2.0","text":"col_date now parses single digit month day (@edzer, #123, #170) fwf_empty() now uses skip parameter, intended. vroom() can now read single line files without terminal newline (#173). vroom() can now select id column provided (#110). vroom() now correctly copies string data factor levels (#184) vroom() longer crashes files trailing fields, windows newlines file newline null terminated. vroom() now includes spec object col_types class, intended. vroom() now better handles floating point values large exponents (#164). vroom() now uses better heuristics guess delimiter now throws error delimiter guessed (#126, #141, #167). vroom() now improved error message file exist (#169). vroom() longer leaks file handles (#177, #180) vroom() now outputs messages stdout() rather stderr(), avoids text red RStudio Windows GUI. vroom() longer overflows reading files 2B entries (@wlattner, #183). vroom_fwf() now robust lines expected length (#78) vroom_fwf() fwf_empty() now support passing Inf guess_max(). vroom_str() now works S4 objects. vroom_fwf() now handles files dos newlines properly. vroom_write() now try write anything given empty inputs (#172). Dates, times, datetimes now properly consider locale parsing. Added benchmarks wide data numeric character data (#87, @R3myG) delimiter used parsing now shown message output (#95 @R3myG)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-102","dir":"Changelog","previous_headings":"","what":"vroom 1.0.2","title":"vroom 1.0.2","text":"CRAN release: 2019-06-28","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"new-features-1-0-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"vroom 1.0.2","text":"column created id now stored run length encoded Altrep vector, uses less memory much faster large inputs. (#111)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"minor-improvements-and-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"vroom 1.0.2","text":"vroom_lines() now properly respects n_max parameter (#142) vroom() vroom_lines() now support reading files end newlines using file connection (#40). vroom_write() now works standard output connection stdout() (#106). vroom_write() longer crashes non-deterministically used Altrep vectors. integer parser now returns NA values invalid inputs (#135) Fix additional UBSAN issue mio project reported CRAN (#97) Fix indexing connections quoted fields (#119) Move example files vroom() \\dontshow{}. Fix integer overflow large files (#116, #119) Fix missing columns windows newlines (#114) Fix encoding column names (#113, #115) Throw error message writing zip file, supported (@metaOO, #145) Default message output vroom() now uses Rows Cols (@meta00, #140)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-101","dir":"Changelog","previous_headings":"","what":"vroom 1.0.1","title":"vroom 1.0.1","text":"CRAN release: 2019-05-14","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"new-features-1-0-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"vroom 1.0.1","text":"vroom_lines() function added, (lazily) read lines file character vector (#90).","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"minor-improvements-and-fixes-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"vroom 1.0.1","text":"Fix hang Windows caused race condition progress bar (#98) Remove accidental runtime dependency testthat (#104) Fix actually return non-Altrep character columns R 3.2, 3.3 3.4. Disable colors progress bar running RStudio, work around issue progress bar garbled (https://github.com/rstudio/rstudio/issues/4777) Fix UBSAN issues reported CRAN (#97) Fix rchk issues reported CRAN (#94) progress bar now updates every 10 milliseconds. Getting started vignette index entry now informative (#92)","code":""},{"path":"https://vroom.r-lib.org/dev/news/index.html","id":"vroom-100","dir":"Changelog","previous_headings":"","what":"vroom 1.0.0","title":"vroom 1.0.0","text":"CRAN release: 2019-05-04 Initial release Added NEWS.md file track changes package.","code":""}]
